import { currentData, setCurrentCategoryFilter, setCurrentTimeFilter, appId, db, userId, addNewlyAddedItem, storage } from './Main.js';
import { openModal, closeModal, goBackModal, closeAllModals, sanitizeHTML, familyLoader } from './utils.js';
import { callGeminiWithParts } from './Gemini.js';
import { populateFlightDetails, populateHotelDetails, renderPackingGuide, renderActivities, populateFamilyDetails, populateNearbyLocations, renderPhotoAlbum, renderBulletinBoard, renderFamilyMemories, renderInteractivePackingList, renderPackingPhotosGallery, familyToast } from './ui.js';
import { VERSION } from './version.js';
import { doc, updateDoc, arrayUnion, arrayRemove, serverTimestamp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
import { ref, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-storage.js";

// Import new modules for enhanced functionality
import { AnimationManager } from './animations.js';
import { ToastManager } from './toast.js';
import { LoadingManager } from './loading.js';

/**
 * Flow Enhancement System
 * Improves user experience through better loading states, feedback, and error handling
 */

// Enhanced loading state management
class FlowEnhancementManager {
    constructor() {
        this.activeLoaders = new Set();
        this.userFeedbackQueue = [];
        this.isProcessing = false;
    }

    /**
     * Show enhanced loading state with context
     */
    showLoading(context, message = '◊ò◊ï◊¢◊ü...') {
        const loaderId = `${context}-${Date.now()}`;
        this.activeLoaders.add(loaderId);
        
        // Use enhanced loading manager if available
        if (window.loadingManager) {
            window.loadingManager.showGlobal(message);
        } else {
            // Fallback to original loader
            familyLoader.show();
        }
        
        return loaderId;
    }

    /**
     * Hide loading state
     */
    hideLoading(loaderId) {
        this.activeLoaders.delete(loaderId);
        
        if (this.activeLoaders.size === 0) {
            if (window.loadingManager) {
                window.loadingManager.hideGlobal();
            } else {
                familyLoader.hide();
            }
        }
    }

    /**
     * Show enhanced user feedback
     */
    showFeedback(type, message, options = {}) {
        // Use enhanced toast manager if available
        if (window.toastManager) {
            switch (type) {
                case 'success':
                    return window.toastManager.success(message, options);
                case 'error':
                    return window.toastManager.error(message, options);
                case 'warning':
                    return window.toastManager.warning(message, options);
                case 'info':
                default:
                    return window.toastManager.info(message, options);
            }
        }
        
        // Fallback to original feedback system
        const feedback = {
            type,
            message,
            timestamp: Date.now(),
            ...options
        };
        
        this.userFeedbackQueue.push(feedback);
        
        // Process feedback queue
        this.processFeedbackQueue();
    }

    /**
     * Process feedback queue with proper timing
     */
    async processFeedbackQueue() {
        if (this.isProcessing || this.userFeedbackQueue.length === 0) {
            return;
        }
        
        this.isProcessing = true;
        
        while (this.userFeedbackQueue.length > 0) {
            const feedback = this.userFeedbackQueue.shift();
            
            switch (feedback.type) {
                case 'success':
                    familyToast.success(feedback.message, feedback.duration || 3000);
                    break;
                case 'error':
                    familyToast.error(feedback.message, feedback.duration || 5000);
                    break;
                case 'warning':
                    familyToast.warning(feedback.message, feedback.duration || 4000);
                    break;
                case 'info':
                    familyToast.info(feedback.message, feedback.duration || 3000);
                    break;
                case 'celebration':
                    familyToast.celebrate(feedback.message, feedback.duration || 4000);
                    break;
            }
            
            // Small delay between feedback items
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        this.isProcessing = false;
    }

    /**
     * Show progress with percentage
     */
    showProgress(percentage, message = '◊û◊¢◊ë◊ì...') {
        // Implementation for progress display
        // Progress tracking (removed console.log for production)
    }

    /**
     * Handle errors with user-friendly messages
     */
    handleError(error, context = '') {
        console.error(`Error in ${context}:`, error);
        
        let userMessage = '◊ê◊ô◊®◊¢◊î ◊©◊í◊ô◊ê◊î. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊ï◊ë.';
        
        if (error.message) {
            if (error.message.includes('network')) {
                userMessage = '◊ë◊¢◊ô◊ô◊™ ◊ó◊ô◊ë◊ï◊® ◊ú◊ê◊ô◊†◊ò◊®◊†◊ò. ◊ê◊†◊ê ◊ë◊ì◊ß◊ï ◊ê◊™ ◊î◊ó◊ô◊ë◊ï◊®.';
            } else if (error.message.includes('permission')) {
                userMessage = '◊ê◊ô◊ü ◊î◊®◊©◊ê◊î ◊ú◊ë◊¶◊¢ ◊§◊¢◊ï◊ú◊î ◊ñ◊ï.';
            } else if (error.message.includes('quota')) {
                userMessage = '◊î◊û◊õ◊°◊î ◊î◊ï◊©◊ú◊û◊î. ◊ê◊†◊ê ◊†◊°◊ï ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.';
            }
        }
        
        this.showFeedback('error', userMessage);
    }
}

// Create global instance
const flowManager = new FlowEnhancementManager();

// Export flow enhancement functions
export function showFlowLoading(context, message) {
    return flowManager.showLoading(context, message);
}

export function hideFlowLoading(loaderId) {
    flowManager.hideLoading(loaderId);
}

export function showFlowProgress(percentage, message) {
    flowManager.showProgress(percentage, message);
}

export function showFlowFeedback(type, message, options) {
    flowManager.showFeedback(type, message, options);
}

export function showFlowSuccess(message, options) {
    flowManager.showFeedback('success', message, options);
}

export function handleFlowError(error, context) {
    flowManager.handleError(error, context);
}

// This is the single entry point for activating all interactive elements on the page.
export function setupEventListeners() {
    // A single master listener is more efficient than attaching many individual ones.
    if (document.body.dataset.listenersAttached) {
        // Event listeners already attached, skipping...
        console.log('‚ö†Ô∏è Event listeners already attached, skipping...');
        return;
    }
    
    console.log('üîß Setting up event listeners...');
    
    // Remove any existing listeners first to prevent duplicates
    document.body.removeEventListener('click', handleDelegatedClicks);
    document.body.removeEventListener('change', handleDelegatedChanges);
    document.body.removeEventListener('keydown', handleDelegatedKeydowns);
    
    // Add the listeners
    document.body.addEventListener('click', handleDelegatedClicks);
    document.body.addEventListener('change', handleDelegatedChanges);
    document.body.addEventListener('keydown', handleDelegatedKeydowns);
    
    // Mark as attached to prevent duplicates
    document.body.dataset.listenersAttached = 'true';
    
    console.log('‚úÖ Event listeners attached successfully');
    
    // Test if event listener is working
    console.log('üß™ Testing event listener - click any button to see if it works');
    
    // Setup mobile menu functionality
    setupMobileMenu();
    
    // Simple fallback mobile menu toggle
    const menuBtn = document.getElementById('menu-btn');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (menuBtn && mobileMenu) {
        console.log('üçî Mobile menu button found, adding click handler');
        menuBtn.addEventListener('click', (e) => {
            console.log('üçî Menu button clicked!');
            e.preventDefault();
            e.stopPropagation();
            
            // Force check the actual display state, not just the class
            const computedStyle = window.getComputedStyle(mobileMenu);
            const isActuallyHidden = computedStyle.display === 'none';
            const hasHiddenClass = mobileMenu.classList.contains('hidden');
            
            console.log('üçî Mobile menu has hidden class:', hasHiddenClass);
            console.log('üçî Mobile menu computed display:', computedStyle.display);
            console.log('üçî Mobile menu is actually hidden:', isActuallyHidden);
            
            // Use the actual display state instead of just the class
            const isHidden = isActuallyHidden;
            
            if (isHidden) {
                console.log('üçî Opening mobile menu');
                mobileMenu.classList.remove('hidden');
                mobileMenu.style.display = 'block'; // Show with inline style
                menuBtn.setAttribute('aria-expanded', 'true');
                menuBtn.innerHTML = `
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                `;
            } else {
                console.log('üçî Closing mobile menu');
                mobileMenu.classList.add('hidden');
                mobileMenu.style.display = 'none'; // Hide with inline style
                menuBtn.setAttribute('aria-expanded', 'false');
                menuBtn.innerHTML = `
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
                    </svg>
                `;
            }
        });
    }
    
    // Force reset mobile menu state on initialization
    setTimeout(() => {
        const mobileMenu = document.getElementById('mobile-menu');
        const menuBtn = document.getElementById('menu-btn');
        if (mobileMenu && menuBtn) {
        // Force resetting mobile menu state...
        mobileMenu.classList.add('hidden');
            menuBtn.setAttribute('aria-expanded', 'false');
            menuBtn.innerHTML = `
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
                </svg>
            `;
            // Mobile menu state reset complete
        }
    }, 100);
    
    document.body.dataset.listenersAttached = 'true';
}

// Enhanced mobile menu functionality
function setupMobileMenu() {
    console.log('üçî Setting up mobile menu...');
    const menuBtn = document.getElementById('menu-btn');
    const mobileMenu = document.getElementById('mobile-menu');
    
    console.log('üçî Menu button found:', !!menuBtn);
    console.log('üçî Mobile menu found:', !!mobileMenu);
    
    if (menuBtn && mobileMenu) {
        console.log('üçî Initializing mobile menu state');
        // Ensure proper initial state - mobile menu starts hidden
        mobileMenu.classList.add('hidden');
        mobileMenu.style.display = 'none'; // Force hidden with inline style too
        menuBtn.setAttribute('aria-expanded', 'false');
        menuBtn.innerHTML = `
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
            </svg>
        `;
        console.log('üçî Mobile menu forced to hidden state');
        console.log('üçî Mobile menu classes after forcing hidden:', mobileMenu.className);
        
        // Mobile menu initialized to hidden state
        
        // Add a mutation observer to track class changes
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                    console.log('üçî Mobile menu classes changed to:', mobileMenu.className);
                }
            });
        });
        observer.observe(mobileMenu, { attributes: true, attributeFilter: ['class'] });
        
        // Add touch event support for better mobile interaction
        menuBtn.addEventListener('touchstart', (e) => {
            e.preventDefault();
            menuBtn.style.backgroundColor = 'rgba(0, 0, 0, 0.1)';
        });
        
        menuBtn.addEventListener('touchend', (e) => {
            e.preventDefault();
            menuBtn.style.backgroundColor = '';
            menuBtn.click();
        });
        
        // Close menu when clicking outside
        document.addEventListener('click', (e) => {
            if (!mobileMenu.contains(e.target) && !menuBtn.contains(e.target)) {
                if (!mobileMenu.classList.contains('hidden')) {
                    menuBtn.click();
                }
            }
        });
        
        // Handle mobile menu link clicks
        mobileMenu.addEventListener('click', (e) => {
            const link = e.target.closest('.mobile-menu-link');
            if (link) {
                e.preventDefault();
                
                const targetId = link.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                
                if (targetElement) {
                    // Close menu first
                    menuBtn.click();
                    
                    // Smooth scroll to target
                    setTimeout(() => {
                        targetElement.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start',
                            inline: 'nearest'
                        });
                        
                        // Add visual feedback
                        targetElement.style.transform = 'scale(1.02)';
                        targetElement.style.transition = 'transform 0.3s ease';
                        setTimeout(() => {
                            targetElement.style.transform = 'scale(1)';
                        }, 300);
                    }, 300);
                }
            }
        });
    }
}

// This function acts as a router for all click events on the page.
function handleDelegatedClicks(e) {
    const target = e.target.closest('button, .photo-item');
    if (!target) return;
    
    // Debug logging
    console.log('üîç Click detected on:', target.tagName, target.id, target.className, target.textContent?.trim());
    
    // Handle photo gallery clicks
    if (target.classList.contains('photo-item')) {
        const photoIndex = parseInt(target.dataset.photoIndex);
        openPhotoModal(photoIndex);
        return;
    }
    
    // Handle delete actions
    if (target.classList.contains('delete-note') || target.classList.contains('delete-memory') || target.classList.contains('delete-packing-item')) {
        handleDeleteAction(target);
        return;
    }
    
    // Only continue with button logic if target is actually a button
    if (!target.matches('button')) return;

    // --- AI Button Logic ---
    if (target.classList.contains('gemini-plan-btn')) handleAiRequest('plan', e);
    if (target.classList.contains('gemini-summary-btn')) handleAiRequest('summary', e);
    if (target.classList.contains('gemini-story-btn')) handleAiRequest('story', e);
    if (target.id === 'what-to-wear-btn') handleWhatToWearRequest();
    if (target.id === 'fun-fact-btn') handleFunFactRequest();
    
    // --- Modal Opening Logic ---
    if (target.closest('#open-flights-modal-btn, #open-flights-modal-btn-main, #open-flights-modal-btn-mobile')) {
        openModal('flights-details-modal', populateFlightDetails);
    }
    if (target.closest('#open-hotel-modal-btn, #open-hotel-modal-btn-main, #open-hotel-booking-btn-mobile')) {
        openModal('hotel-booking-modal', populateHotelDetails);
    }
    if (target.closest('#open-packing-modal-btn, #open-packing-modal-btn-mobile, #open-packing-modal-btn-nav')) {
        console.log('üì¶ Packing button clicked');
        openModal('packing-guide-modal', renderPackingGuide);
    }
     if (target.classList.contains('nav-gemini-btn')) {
        console.log('ü§ñ Gemini button clicked');
        openModal('gemini-chat-modal');
    }
    if (target.classList.contains('nav-family-btn')) {
        console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Family button clicked');
        openModal('family-details-modal', () => populateFamilyDetails());
    }
    if (target.classList.contains('nav-nearby-btn')) {
        console.log('üìç Nearby button clicked');
        openModal('nearby-modal', () => populateNearbyLocations());
    }
    if (target.classList.contains('nav-photos-btn')) {
        console.log('üì∏ Photos button clicked');
        // Scroll to the family sharing section which contains photos
        const photoSection = document.querySelector('#family-sharing');
        if (photoSection) {
            photoSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
        // Close mobile menu after scrolling
        const mobileMenu = document.getElementById('mobile-menu');
        const menuBtn = document.getElementById('menu-btn');
        if (mobileMenu && menuBtn) {
            mobileMenu.classList.add('hidden');
            mobileMenu.style.display = 'none';
            menuBtn.setAttribute('aria-expanded', 'false');
            menuBtn.innerHTML = `
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
                </svg>
            `;
        }
    }

    // --- General UI Logic ---
    // Skip close button logic if this is the mobile menu button
    if (target.id === 'menu-btn') {
        return; // Let the mobile menu handler deal with this
    }
    
    console.log('üîç Checking close button conditions for:', target.id);
    console.log('üîç Has modal-close-btn class:', target.classList.contains('modal-close-btn'));
    console.log('üîç ID includes close-:', target.id.includes('close-'));
    console.log('üîç ID includes -modal-btn:', target.id.includes('-modal-btn'));
    
    if (target.classList.contains('modal-close-btn') || (target.id.includes('close-') && target.id.includes('-modal-btn'))) {
        console.log('üö™ Close button clicked:', target.id, target.className);
        e.stopPropagation(); // Prevent event bubbling to mobile menu
        e.preventDefault(); // Prevent default behavior
        const modal = target.closest('.modal');
        console.log('üîç Found modal:', modal?.id);
        closeModal(modal);
        return; // Exit early to prevent further processing
    }
    if (target.classList.contains('close-result-btn')) {
        const resultContainer = target.closest('.gemini-plan-result');
        if (resultContainer) {
            resultContainer.classList.add('hidden');
            resultContainer.querySelector('.result-content').innerHTML = '';
        }
    }
    // Mobile menu is now handled by setupMobileMenu() - no need for duplicate logic
    if(target.id === 'image-upload-btn') {
        document.getElementById('image-upload-input').click();
    }
    if(target.id === 'bulletin-post-btn') {
        handlePostBulletinMessage();
    }
    if(target.id === 'generate-custom-plan-btn') {
        handleGenerateCustomPlan();
    }
    if(target.id === 'load-more-btn') {
        handleLoadMoreActivities();
    }
    // Removed call to undefined handleActivityCardClick
    if(target.id === 'chat-send-btn') {
        handleChatSend();
    }
    if(target.id === 'photo-upload-btn') {
        document.getElementById('photo-upload-input').click();
    }
    if(target.id === 'add-bulletin-note-btn') {
        handleAddBulletinNote();
    }
    if(target.id === 'add-memory-btn') {
        handleAddMemory();
    }
    if(target.id === 'add-packing-item-btn') {
        handleAddPackingItem();
    }
    if(target.id === 'optimize-luggage-btn') {
        handleOptimizeLuggage();
    }
    if(target.id === 'upload-luggage-photo-btn') {
        document.getElementById('luggage-photo-input').click();
    }
    if(target.id === 'upload-items-photo-btn') {
        document.getElementById('items-photo-input').click();
    }
    if(target.id === 'packing-photo-upload-btn') {
        document.getElementById('packing-photo-input').click();
    }
    if(target.id === 'packing-ai-help-btn') {
        handleSmartPackingAnalysis();
    }
    if(target.id === 'open-flights-modal-btn-mobile' || target.id === 'open-flights-modal-btn-main') {
        openModal('flights-details-modal', () => populateFlightDetails());
        document.getElementById('mobile-menu').classList.add('hidden');
    }
    if(target.id === 'open-hotel-modal-btn-mobile' || target.id === 'open-hotel-modal-btn-main' || target.id === 'open-hotel-modal-btn-nav') {
        openModal('hotel-booking-modal', () => populateHotelDetails());
        document.getElementById('mobile-menu')?.classList.add('mobile-menu-hidden');
    }
    if(target.id === 'open-flights-modal-btn-nav') {
        openModal('flights-details-modal', () => populateFlightDetails());
    }
    if(target.id === 'show-map-btn') {
        openModal('map-modal');
        // Initialize fullscreen map when modal opens
        setTimeout(() => {
            initFullscreenMap();
        }, 200);
    }
    if(target.classList.contains('swap-activity-btn')) {
        console.log('üîÑ Swap activity button detected in click handler');
        handleSwapActivity(target);
    }
    if(target.id === 'daily-special-ai-btn') {
        handleDailySpecialAI();
    }
    if(target.id === 'add-to-plan-btn') {
        handleAddToPlan();
    }
    if(target.id === 'chat-attach-btn') {
        document.getElementById('chat-image-input').click();
    }
    if(target.classList.contains('btn-filter')) {
        // Handle category filters
        if (target.dataset.filter) {
            document.querySelectorAll('.btn-filter[data-filter]').forEach(btn => btn.classList.remove('active'));
            target.classList.add('active');
            setCurrentCategoryFilter(target.dataset.filter);
            renderActivities();
        }
        // Handle time filters
        if (target.dataset.timeFilter) {
            document.querySelectorAll('.btn-filter[data-time-filter]').forEach(btn => btn.classList.remove('active'));
            target.classList.add('active');
            setCurrentTimeFilter(target.dataset.timeFilter);
            renderActivities();
        }
    }
    if(target.classList.contains('remove-item-btn')) {
        handleRemovePackingItem(target);
    }
}

// This function handles events that are not clicks, like file uploads and checkbox toggles.
function handleDelegatedChanges(e) {
    if (e.target.id === 'image-upload-input') handleImageUpload(e);
    if (e.target.id === 'photo-upload-input') handlePhotoUpload();
    if (e.target.matches('.form-checkbox')) handlePackingItemToggle(e);
    // Packing checkboxes are now handled in setupPackingInteractiveElements in ui.js
}

// Removed duplicate handleAiRequest function - using the one below with better error handling

async function handleImageUpload(event) {
    const files = Array.from(event.target.files);
    if (!files.length || !userId) return;

    const publicDataRef = doc(db, `artifacts/${appId}/public/genevaGuide`);

    for (const file of files) {
        const timestamp = Date.now();
        const storageRef = ref(storage, `trip-photos/${userId}/${timestamp}-${file.name}`);
        await uploadBytes(storageRef, file);
        const url = await getDownloadURL(storageRef);
        await updateDoc(publicDataRef, { 
            photoAlbum: arrayUnion({ url, uploadedAt: timestamp, owner: userId })
        });
    }
}

async function handlePostBulletinMessage() {
    const input = document.getElementById('bulletin-input');
    const text = input.value.trim();
    if (!text) return;

    const publicDataRef = doc(db, `artifacts/${appId}/public/genevaGuide`);
    const newMessage = { text, timestamp: serverTimestamp() };
    
    await updateDoc(publicDataRef, { bulletinBoard: arrayUnion(newMessage) });
    addNewlyAddedItem(`${text}-${newMessage.timestamp}`);
    input.value = '';
}

async function handlePackingItemToggle(event) {
    const { category, name } = event.target.dataset;
    const isChecked = event.target.checked;
    const publicDataRef = doc(db, `artifacts/${appId}/public/genevaGuide`);
    
    const updatedItems = currentData.packingListData[category].map(item => 
        item.name === name ? { ...item, checked: isChecked } : item
    );

    await updateDoc(publicDataRef, {
        [`packingListData.${category}`]: updatedItems
    });
}

async function handleRemovePackingItem(button) {
    const { category, name } = button.dataset;
    const publicDataRef = doc(db, `artifacts/${appId}/public/genevaGuide`);

    const itemToRemove = currentData.packingListData[category].find(item => item.name === name);

    if (itemToRemove) {
        await updateDoc(publicDataRef, {
            [`packingListData.${category}`]: arrayRemove(itemToRemove)
        });
    }
}

// Handle custom plan generation
async function handleGenerateCustomPlan() {
    const input = document.getElementById('custom-plan-prompt');
    const resultDiv = document.getElementById('custom-plan-result');
    const prompt = input.value.trim();
    
    if (!prompt) {
        resultDiv.innerHTML = '<p class="text-red-600 text-center">◊ê◊†◊ê ◊î◊ñ◊ü ◊™◊ô◊ê◊ï◊® ◊ú◊™◊ï◊õ◊†◊ô◊™ ◊î◊®◊¶◊ï◊ô◊î</p>';
        return;
    }
    
    resultDiv.innerHTML = '<div class="text-center"><div class="loader inline-block"></div><p class="mt-2">◊ô◊ï◊¶◊® ◊™◊ï◊õ◊†◊ô◊™ ◊û◊ï◊™◊ê◊û◊™ ◊ê◊ô◊©◊ô◊™...</p></div>';
    
    try {
        const response = await callGeminiWithParts([
            `◊¶◊ï◊® ◊™◊ï◊õ◊†◊ô◊™ ◊ô◊ï◊û◊ô◊™ ◊û◊§◊ï◊®◊ò◊™ ◊ú◊ò◊ô◊ï◊ú ◊û◊©◊§◊ó◊™◊ô ◊ë◊ñ'◊†◊ë◊î ◊¢◊ù ◊ô◊ú◊ì◊ô◊ù ◊ë◊†◊ô 2 ◊ï-3 ◊ë◊î◊™◊ë◊°◊° ◊¢◊ú ◊î◊ë◊ß◊©◊î: "${prompt}". 
            ◊õ◊ú◊ï◊ú ◊î◊û◊ú◊¶◊ï◊™ ◊°◊§◊¶◊ô◊§◊ô◊ï◊™, ◊ñ◊û◊†◊ô ◊†◊°◊ô◊¢◊î, ◊ï◊¢◊¶◊ï◊™ ◊û◊¢◊©◊ô◊ï◊™ ◊ú◊î◊ï◊®◊ô◊ù.`
        ], 'pro'); // Use Pro model for complex planning
        
        // Save custom plan to Firebase
        const customPlanData = {
            prompt: prompt,
            response: response,
            timestamp: Date.now()
        };
        
        // Update local state
        if (!currentData.customPlans) currentData.customPlans = [];
        currentData.customPlans.unshift(customPlanData);
        
        // Save to Firebase for persistence
        try {
            const publicDataRef = doc(db, `artifacts/${appId}/public/genevaGuide`);
            await updateDoc(publicDataRef, { 
                customPlans: arrayUnion(customPlanData)
            });
        } catch (error) {
            console.warn('Failed to save custom plan to Firebase:', error);
        }
        
        resultDiv.innerHTML = `
            <div class="bg-white p-6 rounded-xl shadow-lg border border-accent mt-4">
                <h3 class="text-lg font-bold mb-4 text-accent">◊î◊™◊ï◊õ◊†◊ô◊™ ◊î◊û◊ï◊™◊ê◊û◊™ ◊©◊ú◊õ◊ù üéØ</h3>
                <div class="prose text-gray-700">${response}</div>
            </div>
        `;
        
        // Clear input after successful generation
        input.value = '';
        
    } catch (error) {
        resultDiv.innerHTML = '<p class="text-red-600 text-center">◊©◊í◊ô◊ê◊î ◊ë◊ô◊¶◊ô◊®◊™ ◊î◊™◊ï◊õ◊†◊ô◊™. ◊†◊°◊ï ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.</p>';
        console.warn('Custom plan generation error:', error);
    }
}

// Handle load more activities
export async function handleLoadMoreActivities() {
    const currentDisplayed = window.displayedActivitiesCount || 6;
    const totalCachedActivities = currentData.activitiesData ? currentData.activitiesData.length : 0;
    
    // If we still have cached activities to show, increase the count
    if (totalCachedActivities > currentDisplayed) {
        window.displayedActivitiesCount = Math.min(currentDisplayed + 6, totalCachedActivities);
        
        // Re-render activities to show more from cache
        import(`./ui.js?v=${VERSION}`).then(({ renderActivities }) => {
            renderActivities();
        });
    } else {
        // No more cached activities - generate new ones with Gemini
        await generateMoreActivitiesWithGemini();
    }
    
    // Smooth scroll to show new activities
    setTimeout(() => {
        const activitiesSection = document.getElementById('activities');
        if (activitiesSection) {
            activitiesSection.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }, 100);
}

async function generateMoreActivitiesWithGemini() {
    const loadMoreBtn = document.getElementById('load-more-btn');
    
    // Show enhanced loading state
    if (loadMoreBtn) {
        loadMoreBtn.disabled = true;
        loadMoreBtn.innerHTML = `
            <div class="flex items-center justify-center gap-3">
                <div class="relative">
                    <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    <div class="absolute inset-0 w-5 h-5 border-2 border-purple-200 border-t-transparent rounded-full animate-spin" style="animation-delay: 0.1s;"></div>
                </div>
                <span class="text-sm font-semibold">ü§ñ ◊û◊ó◊§◊© ◊§◊¢◊ô◊ú◊ï◊ô◊ï◊™ ◊†◊ï◊°◊§◊ï◊™ ◊¢◊ù AI...</span>
            </div>
        `;
        loadMoreBtn.className = 'bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white px-8 py-4 rounded-2xl font-medium shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 cursor-not-allowed opacity-90';
    }
    
    try {
        // Get current filter context
        const currentCategory = window.currentCategoryFilter && window.currentCategoryFilter !== 'all' ? 
                              window.currentCategoryFilter : '◊õ◊ú ◊î◊ß◊ò◊í◊ï◊®◊ô◊ï◊™';
        const currentTime = window.currentTimeFilter && window.currentTimeFilter !== 'all' ? 
                           window.currentTimeFilter : '◊õ◊ú ◊û◊©◊õ◊ô ◊î◊ñ◊û◊ü';
        
        // Build context from existing activities for better suggestions
        const existingCategories = [...new Set(currentData.activitiesData?.map(a => a.category) || [])];
        const averageTime = currentData.activitiesData?.length > 0 ? 
                           Math.round(currentData.activitiesData.reduce((sum, a) => sum + (parseInt(a.time) || 30), 0) / currentData.activitiesData.length) : 45;
        
        const prompt = `Generate 6 new family activities in Geneva for families with toddlers.

Context: ${currentData.activitiesData?.length || 0} existing activities, categories: ${existingCategories.join(', ')}, average time: ${averageTime} minutes.

Respond with JSON array only:
[
  {
    "name": "Activity Name in Hebrew",
    "category": "◊û◊©◊ó◊ß◊ô◊ô◊î",
    "time": "30", 
    "cost": "15 CHF",
    "transport": "Bus line 8",
    "address": "Geneva address",
    "whatToBring": ["items"],
    "description": "Description in Hebrew"
  }
]`;

        const response = await callGeminiWithParts([prompt], 'pro'); // Use Pro model for complex analysis
        
        // Try to parse JSON response
        let newActivities = [];
        try {
            // Extract JSON from the response
            const jsonMatch = response.match(/\[[\s\S]*\]/);
            if (jsonMatch) {
                newActivities = JSON.parse(jsonMatch[0]);
            }
        } catch (parseError) {
            console.warn('Failed to parse Gemini response as JSON:', parseError);
            // Fallback: create activities from text response
            newActivities = createActivitiesFromText(response);
        }
        
        if (newActivities.length > 0) {
            // Add generated activities to the current data
            if (!currentData.activitiesData) {
                currentData.activitiesData = [];
            }
            
            // Add unique ID and ensure required fields
            newActivities.forEach((activity, index) => {
                activity.id = Date.now() + index; // Simple unique ID
                activity.generated = true; // Mark as AI-generated
                activity.openingHours = activity.openingHours || { "◊®◊ê◊©◊ï◊ü": "09:00-18:00", "◊©◊†◊ô": "09:00-18:00", "◊©◊ú◊ô◊©◊ô": "09:00-18:00", "◊®◊ë◊ô◊¢◊ô": "09:00-18:00", "◊ó◊û◊ô◊©◊ô": "09:00-18:00", "◊©◊ô◊©◊ô": "09:00-18:00", "◊©◊ë◊™": "10:00-17:00" };
                activity.link = activity.link || `https://www.google.com/search?q=${encodeURIComponent(activity.name + ' Geneva')}`;
            });
            
            currentData.activitiesData.push(...newActivities);
            window.displayedActivitiesCount = (window.displayedActivitiesCount || 6) + newActivities.length;
            
            // Re-render activities with new ones
            import(`./ui.js?v=${VERSION}`).then(({ renderActivities }) => {
                renderActivities();
            });
            
            // Successfully generated activities with AI
        } else {
            throw new Error('No activities generated');
        }
        
    } catch (error) {
        console.warn('Failed to generate activities with Gemini:', error);
        
        // Show error message
        if (loadMoreBtn) {
            loadMoreBtn.innerHTML = `
                <div class="flex items-center justify-center gap-2">
                    <span class="text-lg">‚ùå</span>
                    <span class="text-sm font-semibold">◊©◊í◊ô◊ê◊î ◊ë◊ô◊¶◊ô◊®◊™ ◊§◊¢◊ô◊ú◊ï◊ô◊ï◊™ ◊ó◊ì◊©◊ï◊™</span>
                </div>
            `;
            loadMoreBtn.className = 'bg-gradient-to-r from-red-500 to-red-600 text-white px-8 py-4 rounded-2xl font-medium shadow-lg transition-all duration-300';
            
            // Reset button after 3 seconds
            setTimeout(() => {
                loadMoreBtn.disabled = false;
                loadMoreBtn.innerHTML = `
                    <span class="flex items-center justify-center gap-2">
                        <span class="text-lg">ü§ñ</span>
                        <span class="whitespace-nowrap">◊†◊°◊î ◊©◊ï◊ë ◊ú◊ô◊¶◊ï◊® ◊§◊¢◊ô◊ú◊ï◊ô◊ï◊™</span>
                    </span>
                `;
                loadMoreBtn.className = 'bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white px-6 py-3 rounded-lg font-medium transition-all duration-300 hover:scale-105 hover:shadow-lg';
            }, 3000);
        }
    }
}

function createActivitiesFromText(responseText) {
    // Fallback function to create activities from text response if JSON parsing fails
    const activities = [];
    const lines = responseText.split('\n').filter(line => line.trim());
    
    let currentActivity = {};
    lines.forEach(line => {
        if (line.includes('◊©◊ù:') || line.includes('name:')) {
            if (currentActivity.name) {
                activities.push(currentActivity);
            }
            currentActivity = {
                name: line.split(':')[1]?.trim() || `◊§◊¢◊ô◊ú◊ï◊™ ◊ó◊ì◊©◊î ${Date.now()}`,
                category: '◊û◊©◊§◊ó◊™◊ô',
                time: '45',
                cost: '◊û◊©◊™◊†◊î',
                transport: '◊™◊ó◊ë◊ï◊®◊î ◊¶◊ô◊ë◊ï◊®◊ô◊™',
                address: '◊ñ\'◊†◊ë◊î, ◊©◊ï◊ï◊ô◊ô◊•',
                whatToBring: '◊ë◊í◊ì◊ô◊ù ◊†◊ï◊ó◊ô◊ù',
                description: '◊§◊¢◊ô◊ú◊ï◊™ ◊û◊ï◊û◊ú◊¶◊™ ◊ú◊û◊©◊§◊ó◊ï◊™'
            };
        }
    });
    
    if (currentActivity.name) {
        activities.push(currentActivity);
    }
    
    return activities.slice(0, 6); // Limit to 6 activities
}

// Handle chat send message
async function handleChatSend() {
    const input = document.getElementById('chat-input');
    const messagesContainer = document.getElementById('chat-messages');
    const loader = document.getElementById('chat-loader');
    const message = input.value.trim();
    
    if (!message) return;
    
    // Use default model (Gemini 2.0 Flash)
    const selectedModel = 'flash-exp';
    
    // Add user message
    const userBubble = document.createElement('div');
    userBubble.className = 'chat-bubble user';
    userBubble.textContent = message;
    messagesContainer.appendChild(userBubble);
    
    // Save user message to Firebase
    const userMessageData = {
        type: 'user',
        content: message,
        timestamp: Date.now()
    };
    
    // Update local state
    if (!currentData.chatMessages) currentData.chatMessages = [];
    currentData.chatMessages.push(userMessageData);
    
    // Save to Firebase for persistence
    try {
        const publicDataRef = doc(db, `artifacts/${appId}/public/genevaGuide`);
        await updateDoc(publicDataRef, { 
            chatMessages: arrayUnion(userMessageData)
        });
    } catch (error) {
        console.warn('Failed to save user message to Firebase:', error);
    }
    
    input.value = '';
    loader.classList.remove('hidden');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    try {
        const response = await callGeminiWithParts([message], selectedModel);
        
        const geminieBubble = document.createElement('div');
        geminieBubble.className = 'chat-bubble gemini';
        // Sanitize HTML to prevent XSS
        geminieBubble.textContent = response;
        messagesContainer.appendChild(geminieBubble);
        
        // Save bot response to Firebase
        const botMessageData = {
            type: 'bot',
            content: response,
            timestamp: Date.now()
        };
        
        // Update local state
        currentData.chatMessages.push(botMessageData);
        
        // Save to Firebase for persistence
        try {
            const publicDataRef = doc(db, `artifacts/${appId}/public/genevaGuide`);
            await updateDoc(publicDataRef, { 
                chatMessages: arrayUnion(botMessageData)
            });
        } catch (error) {
            console.warn('Failed to save bot message to Firebase:', error);
        }
        
    } catch (error) {
        const errorBubble = document.createElement('div');
        errorBubble.className = 'chat-bubble gemini';
        
        // Enhanced error message for quota issues
        let errorMessage = '◊°◊ú◊ô◊ó◊î, ◊ê◊†◊ô ◊ú◊ê ◊ô◊õ◊ï◊ú ◊ú◊¢◊†◊ï◊™ ◊õ◊®◊í◊¢. ◊†◊°◊î ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.';
        if (error.message && error.message.includes('◊û◊í◊ë◊ú◊™ ◊î◊©◊ô◊û◊ï◊© ◊î◊ô◊ï◊û◊ô◊™')) {
            errorMessage = `üö´ ${error.message}\n\nüí° ◊ò◊ô◊§◊ô◊ù:\n‚Ä¢ ◊†◊°◊ï ◊©◊ï◊ë ◊û◊ó◊®\n‚Ä¢ ◊©◊ì◊®◊í◊ï ◊ê◊™ ◊î◊™◊ï◊õ◊†◊ô◊™ ◊ë-Google AI Studio\n‚Ä¢ ◊î◊©◊™◊û◊©◊ï ◊ë◊û◊ï◊ì◊ú ◊û◊î◊ô◊® ◊ô◊ï◊™◊® (Flash)`;
            
            // Show quota exceeded notification
            showQuotaExceededNotification();
        } else if (error.message && error.message.includes('◊ë◊¢◊ô◊î ◊¢◊ù ◊î◊™◊ï◊õ◊†◊ô◊™')) {
            errorMessage = `üí≥ ${error.message}\n\nüîó ◊ë◊ß◊®◊ï ◊ë: https://aistudio.google.com/app/apikey`;
        }
        
        errorBubble.textContent = errorMessage;
        messagesContainer.appendChild(errorBubble);
        console.warn('Chat error:', error);
    }
    
    loader.classList.add('hidden');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Format AI response with clean, site-consistent styling
function formatAiResponse(text) {
    // Clean up the text - remove bullet points and excessive formatting
    let cleanedText = text
        // Remove bullet points and asterisks
        .replace(/^\s*[‚Ä¢\*\-]\s*/gm, '') // Remove bullet points
        .replace(/\*{1,}/g, '') // Remove all asterisks
        .replace(/\n{3,}/g, '\n\n') // Reduce excessive line breaks
        .replace(/[^\u0000-\u007F\u0590-\u05FF\u2000-\u206F\u2E00-\u2E7F\u3000-\u303F\uFEFF]/g, '') // Remove non-printable characters
        .trim();
    
    // Simple, clean formatting that matches the site's style
    let formatted = cleanedText
        // Convert headers to simple styled headers
        .replace(/^(.+?):\s*$/gm, '<h3 class="text-lg font-bold mb-3" style="color: #4A6B7A;">$1</h3>')
        
        // Convert line breaks to proper paragraph breaks
        .replace(/\n\n/g, '</p><p class="mb-3 text-gray-700 leading-relaxed">')
        
        // Wrap the entire content in a paragraph
        .replace(/^/, '<p class="mb-3 text-gray-700 leading-relaxed">')
        .replace(/$/, '</p>');
    
    // Wrap in an enhanced container with better styling and animations
    return `
        <div class="prose prose-lg max-w-none text-gray-700 leading-relaxed">
                <div class="space-y-6 p-6 rounded-2xl shadow-lg" style="background: linear-gradient(135deg, #FFF8DE 0%, #C5D3E8 50%, #D0E8C5 100%); border: 1px solid #A6AEBF;">
                <div class="text-center mb-6">
                    <div class="ai-response-button inline-flex items-center px-6 py-3 text-white rounded-2xl text-sm font-bold shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105 relative overflow-hidden">
                        <div class="absolute inset-0 opacity-0 hover:opacity-100 transition-opacity duration-300" style="background: linear-gradient(135deg, rgba(241, 240, 232, 0.3) 0%, transparent 100%);"></div>
                        <div class="relative flex items-center">
                            <div class="flex items-center mr-3">
                                <span class="w-3 h-3 bg-white rounded-full mr-1 animate-pulse"></span>
                                <span class="w-2 h-2 bg-white/80 rounded-full mr-1 animate-pulse" style="animation-delay: 0.2s;"></span>
                                <span class="w-1 h-1 bg-white/60 rounded-full animate-pulse" style="animation-delay: 0.4s;"></span>
                            </div>
                            <span class="text-white font-bold tracking-wide">‚ú® ◊™◊©◊ï◊ë◊î ◊û◊ï◊™◊ê◊û◊™ ◊ê◊ô◊©◊ô◊™ ‚ú®</span>
                        </div>
                    </div>
                </div>
                <div class="space-y-4 animate-fade-in">
                    ${formatted}
                </div>
                <div class="text-center mt-8 pt-4 border-t border-gray-200">
                    <p class="text-sm text-gray-500 flex items-center justify-center">
                        <span class="mr-2">‚ú®</span>
                        ◊™◊©◊ï◊ë◊î ◊ñ◊ï ◊†◊ï◊¶◊®◊î ◊ë◊û◊ô◊ï◊ó◊ì ◊¢◊ë◊ï◊®◊õ◊ù
                        <span class="ml-2">‚ú®</span>
                    </p>
                </div>
            </div>
        </div>
    `;
}

// Show AI response modal with loading state support
function showAiResponseModal(response, modalTitle, isLoading = false) {
    const modal = document.getElementById('text-response-modal');
    const titleEl = document.getElementById('text-response-modal-title');
    const contentEl = document.getElementById('text-response-modal-content');
    
    if (!modal || !titleEl || !contentEl) {
        console.warn('Modal elements not found');
        if (response) alert(response);
        return;
    }
    
    // Set title
    titleEl.textContent = modalTitle;
    
    // Set content based on loading state
    if (isLoading) {
        contentEl.innerHTML = `
            <div class="text-center py-12">
                <div class="relative mx-auto w-16 h-16 mb-6">
                    <div class="absolute inset-0 border-4 border-blue-200 rounded-full animate-spin"></div>
                    <div class="absolute inset-0 border-4 border-transparent border-t-blue-500 rounded-full animate-spin" style="animation-delay: 0.1s;"></div>
                    <div class="absolute inset-0 border-4 border-transparent border-t-purple-500 rounded-full animate-spin" style="animation-delay: 0.2s;"></div>
                </div>
                <div class="bg-gradient-to-r from-blue-50 to-purple-50 p-6 rounded-2xl border border-blue-200 shadow-lg">
                    <p class="text-lg font-semibold text-gray-700 mb-2">ü§ñ ◊î◊û◊ï◊û◊ó◊î ◊©◊ú◊†◊ï ◊¢◊ï◊ë◊ì ◊¢◊ú ◊î◊™◊©◊ï◊ë◊î ◊©◊ú◊õ◊ù...</p>
                    <p class="text-sm text-gray-500">◊ñ◊î ◊ô◊õ◊ï◊ú ◊ú◊ß◊ó◊™ ◊õ◊û◊î ◊©◊†◊ô◊ï◊™</p>
                </div>
            </div>
        `;
    } else if (response) {
        try {
            const sanitizedContent = sanitizeHTML(response);
            const formattedContent = formatAiResponse(sanitizedContent);
            contentEl.innerHTML = formattedContent;
        } catch (sanitizeError) {
            console.warn("Sanitize error, using raw content:", sanitizeError);
            const formattedContent = formatAiResponse(response);
            contentEl.innerHTML = formattedContent;
        }
    }
    
    // Show modal
    modal.classList.remove('hidden');
    modal.style.setProperty('display', 'flex', 'important');
    modal.style.setProperty('visibility', 'visible', 'important');
    modal.style.setProperty('opacity', '1', 'important');
    modal.style.setProperty('z-index', '9999', 'important');
}

// Handle AI requests (weather, planning, stories)
async function handleAiRequest(type, event) {
    const button = event.target;
    const originalText = button.textContent;
    
    // Show loading state
    button.disabled = true;
    button.innerHTML = '<div class="loader inline-block mr-2"></div>◊ò◊ï◊¢◊ü...';
    
    try {
        let prompt = '';
        let modalTitle = '';
        
        switch (type) {
            case 'whatToWear':
                prompt = '◊ë◊î◊™◊ë◊°◊° ◊¢◊ú ◊û◊ñ◊í ◊î◊ê◊ï◊ï◊ô◊® ◊î◊†◊ï◊õ◊ó◊ô ◊ë◊ñ\'◊†◊ë◊î, ◊û◊î ◊û◊ï◊û◊ú◊• ◊ú◊ú◊ë◊ï◊© ◊î◊ô◊ï◊ù ◊ú◊û◊©◊§◊ó◊î ◊¢◊ù ◊ô◊ú◊ì◊ô◊ù ◊ß◊ò◊†◊ô◊ù? ◊õ◊ú◊ï◊ú ◊î◊û◊ú◊¶◊ï◊™ ◊°◊§◊¶◊ô◊§◊ô◊ï◊™ ◊ú◊ë◊í◊ì◊ô◊ù ◊ï◊¶◊ô◊ï◊ì ◊†◊ï◊°◊£.';
                modalTitle = '◊î◊û◊ú◊¶◊ï◊™ ◊ú◊ë◊ï◊© ◊ú◊î◊ô◊ï◊ù';
                break;
            case 'plan':
                prompt = '◊™◊õ◊†◊ü ◊ú◊ô ◊ë◊ï◊ß◊® ◊û◊§◊ï◊®◊ò ◊ú◊ò◊ô◊ï◊ú ◊û◊©◊§◊ó◊™◊ô ◊ë◊ñ\'◊†◊ë◊î ◊¢◊ù ◊ô◊ú◊ì◊ô◊ù ◊ë◊†◊ô 2 ◊ï-3. ◊õ◊ú◊ï◊ú ◊î◊û◊ú◊¶◊ï◊™ ◊ñ◊û◊†◊ô◊ù, ◊§◊¢◊ô◊ú◊ï◊ô◊ï◊™, ◊ï◊ò◊ô◊§◊ô◊ù ◊û◊¢◊©◊ô◊ô◊ù.';
                modalTitle = '◊™◊ï◊õ◊†◊ô◊™ ◊î◊ë◊ï◊ß◊® ◊©◊ú◊õ◊ù';
                break;
            case 'summary':
                prompt = '◊°◊õ◊ù ◊ê◊™ ◊î◊§◊¢◊ô◊ú◊ï◊ô◊ï◊™ ◊î◊û◊™◊ï◊õ◊†◊†◊ï◊™ ◊ú◊î◊ô◊ï◊ù ◊ë◊©◊§◊î ◊§◊©◊ï◊ò◊î ◊ï◊ô◊ì◊ô◊ì◊ï◊™◊ô◊™ ◊ú◊ô◊ú◊ì◊ô◊ù ◊ß◊ò◊†◊ô◊ù, ◊¢◊ù ◊î◊®◊ë◊î ◊ê◊ô◊û◊ï◊í\'◊ô◊ù ◊ï◊ó◊ô◊ñ◊ï◊ß ◊ó◊ô◊ï◊ë◊ô.';
                modalTitle = '◊î◊°◊ô◊õ◊ï◊ù ◊ú◊ô◊ú◊ì◊ô◊ù';
                break;
            case 'story':
                prompt = '◊õ◊™◊ë ◊°◊ô◊§◊ï◊® ◊ß◊¶◊® ◊ï◊û◊™◊ï◊ß ◊ú◊ô◊ú◊ì◊ô◊ù ◊ë◊†◊ô 2-3 ◊¢◊ú ◊î◊®◊§◊™◊ß◊ê◊ï◊™ ◊ë◊ñ\'◊†◊ë◊î. ◊î◊°◊ô◊§◊ï◊® ◊¶◊®◊ô◊ö ◊ú◊î◊ô◊ï◊™ ◊û◊®◊í◊ô◊¢ ◊ï◊û◊™◊ê◊ô◊ù ◊ú◊§◊†◊ô ◊î◊©◊ô◊†◊î.';
                modalTitle = '◊°◊ô◊§◊ï◊® ◊ú◊ô◊ú◊î ◊ò◊ï◊ë';
                break;
            default:
                throw new Error('Unknown AI request type');
        }
        
        // Show modal immediately with loading state
        showAiResponseModal('', modalTitle, true); // true = loading state
        
        // Test the endpoint first
        const { testGeminiEndpoint } = await import('./Gemini.js');
        const testStatus = await testGeminiEndpoint();
        
        const response = await callGeminiWithParts([prompt]);
        
        // Update modal with actual response
        showAiResponseModal(response, modalTitle, false); // false = not loading
        
    } catch (error) {
        console.warn('AI request failed:', error);
        // Show error in modal
        showAiResponseModal('◊©◊í◊ô◊ê◊î ◊ë◊ß◊ë◊ú◊™ ◊™◊©◊ï◊ë◊î ◊û◊î◊û◊ï◊û◊ó◊î. ◊†◊°◊ï ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.', modalTitle || '◊©◊í◊ô◊ê◊î', false);
    } finally {
        // Restore button
        button.disabled = false;
        button.innerHTML = originalText;
    }
}

// Handle fun fact requests for Swiss stereotypes
async function handleFunFactRequest() {
    const button = document.getElementById('fun-fact-btn');
    const resultDiv = document.getElementById('fun-fact-result');
    const contentDiv = document.getElementById('fun-fact-content');
    const textSpan = document.getElementById('fun-fact-text');
    
    if (!button || !resultDiv || !contentDiv || !textSpan) {
        console.error('Fun fact elements not found');
        return;
    }
    
    // Show loading state
    const originalText = textSpan.textContent;
    button.disabled = true;
    textSpan.textContent = '◊ò◊ï◊¢◊ü ◊¢◊ï◊ë◊ì◊î ◊û◊¢◊†◊ô◊ô◊†◊™...';
    
    try {
        // Create prompt for Swiss stereotypes and fun facts
        const prompt = `◊™◊ü ◊ú◊ô ◊¢◊ï◊ë◊ì◊î ◊û◊¢◊†◊ô◊ô◊†◊™ ◊ê◊ï ◊°◊ò◊®◊ô◊ê◊ï◊ò◊ô◊§ ◊û◊¶◊ó◊ô◊ß ◊¢◊ú ◊©◊ï◊ï◊ô◊•. ◊ñ◊î ◊ô◊õ◊ï◊ú ◊ú◊î◊ô◊ï◊™ ◊¢◊ú:
        - ◊î◊ê◊ï◊§◊ô ◊î◊©◊ï◊ï◊ô◊¶◊®◊ô (◊ì◊ô◊ï◊ß, ◊†◊ß◊ô◊ï◊ü, ◊ê◊®◊í◊ï◊ü)
        - ◊î◊ê◊ï◊õ◊ú ◊î◊©◊ï◊ï◊ô◊¶◊®◊ô (◊©◊ï◊ß◊ï◊ú◊ì, ◊í◊ë◊ô◊†◊î, ◊§◊ï◊†◊ì◊ï)
        - ◊î◊™◊®◊ë◊ï◊™ ◊î◊©◊ï◊ï◊ô◊¶◊®◊ô◊™ (◊ë◊†◊ß◊ô◊ù, ◊©◊¢◊ï◊†◊ô◊ù, ◊î◊®◊ô◊ù)
        - ◊î◊ô◊°◊ò◊ï◊®◊ô◊î ◊û◊¢◊†◊ô◊ô◊†◊™
        - ◊ì◊ë◊®◊ô◊ù ◊û◊ï◊ñ◊®◊ô◊ù ◊ê◊ï ◊û◊¶◊ó◊ô◊ß◊ô◊ù ◊¢◊ú ◊©◊ï◊ï◊ô◊•
        
        ◊™◊ü ◊™◊©◊ï◊ë◊î ◊ß◊¶◊®◊î ◊ï◊û◊©◊¢◊©◊¢◊™ ◊ë◊¢◊ë◊®◊ô◊™, ◊¢◊ù ◊ò◊ï◊ü ◊ß◊ú◊ô◊ú ◊ï◊û◊¶◊ó◊ô◊ß.`;
        
        const response = await callGeminiWithParts([prompt]);
        
        // Show the result
        contentDiv.textContent = response;
        resultDiv.classList.remove('hidden');
        
        // Update button text
        textSpan.textContent = 'üé≠ ◊¢◊ï◊ì ◊¢◊ï◊ë◊ì◊î ◊û◊¢◊†◊ô◊ô◊†◊™';
        
    } catch (error) {
        console.error('Fun fact request failed:', error);
        contentDiv.textContent = '◊©◊í◊ô◊ê◊î ◊ë◊ß◊ë◊ú◊™ ◊¢◊ï◊ë◊ì◊î ◊û◊¢◊†◊ô◊ô◊†◊™. ◊†◊°◊ï ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.';
        resultDiv.classList.remove('hidden');
        textSpan.textContent = originalText;
    } finally {
        button.disabled = false;
    }
}

// Handle keyboard interactions for accessibility
function handleDelegatedKeydowns(e) {
    // Enter key on chat input
    if (e.target.id === 'chat-input' && e.key === 'Enter') {
        e.preventDefault();
        handleChatSend();
    }
    
    // Enter key on custom plan input
    if (e.target.id === 'custom-plan-prompt' && e.key === 'Enter') {
        e.preventDefault();
        handleGenerateCustomPlan();
    }
    
    // Escape key to close modals
    if (e.key === 'Escape') {
        const openModal = document.querySelector('.modal:not(.hidden)');
        if (openModal) {
            openModal.classList.add('hidden');
        }
    }
    
    // Enter key on bulletin note input
    if (e.target.id === 'bulletin-note-input' && e.key === 'Enter') {
        e.preventDefault();
        handleAddBulletinNote();
    }
    
    // Enter key on packing item input
    if (e.target.id === 'packing-item-input' && e.key === 'Enter') {
        e.preventDefault();
        handleAddPackingItem();
    }
}

// Helper function to get user-friendly Firebase error messages
function getFirebaseErrorMessage(error) {
    const errorCode = error.code || error.message;
    
    switch (errorCode) {
        case 'storage/unauthorized':
            return '◊ê◊ô◊ü ◊î◊®◊©◊ê◊î ◊ú◊î◊¢◊ú◊ï◊™ ◊™◊û◊ï◊†◊ï◊™. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊ï◊ë.';
        case 'storage/canceled':
            return '◊î◊¢◊ú◊ê◊™ ◊î◊™◊û◊ï◊†◊î ◊ë◊ï◊ò◊ú◊î.';
        case 'storage/unknown':
            return '◊©◊í◊ô◊ê◊î ◊ú◊ê ◊ô◊ì◊ï◊¢◊î ◊ë◊î◊¢◊ú◊ê◊™ ◊î◊™◊û◊ï◊†◊î.';
        case 'storage/invalid-format':
            return '◊§◊ï◊®◊û◊ò ◊î◊ß◊ï◊ë◊• ◊ú◊ê ◊†◊™◊û◊ö. ◊ê◊†◊ê ◊ë◊ó◊®◊ï ◊™◊û◊ï◊†◊î ◊ë◊§◊ï◊®◊û◊ò JPG, PNG ◊ê◊ï GIF.';
        case 'storage/object-not-found':
            return '◊î◊ß◊ï◊ë◊• ◊ú◊ê ◊†◊û◊¶◊ê. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊ï◊ë.';
        case 'storage/bucket-not-found':
            return '◊©◊í◊ô◊ê◊î ◊ë◊©◊®◊™ ◊î◊ê◊ó◊°◊ï◊ü. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.';
        case 'storage/project-not-found':
            return '◊©◊í◊ô◊ê◊î ◊ë◊§◊®◊ï◊ô◊ß◊ò. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.';
        case 'storage/quota-exceeded':
            return '◊î◊í◊¢◊™◊ù ◊ú◊û◊í◊ë◊ú◊™ ◊î◊ê◊ó◊°◊ï◊ü. ◊ê◊†◊ê ◊†◊°◊ï ◊ú◊î◊¢◊ú◊ï◊™ ◊™◊û◊ï◊†◊î ◊ß◊ò◊†◊î ◊ô◊ï◊™◊®.';
        case 'storage/unauthenticated':
            return '◊†◊ì◊®◊©◊™ ◊î◊ñ◊ì◊î◊ï◊™. ◊ê◊†◊ê ◊®◊¢◊†◊†◊ï ◊ê◊™ ◊î◊ì◊£ ◊ï◊†◊°◊ï ◊©◊ï◊ë.';
        case 'storage/retry-limit-exceeded':
            return '◊î◊¢◊ú◊ê◊™ ◊î◊™◊û◊ï◊†◊î ◊†◊õ◊©◊ú◊î ◊û◊°◊§◊® ◊§◊¢◊û◊ô◊ù. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.';
        case 'storage/invalid-checksum':
            return '◊î◊ß◊ï◊ë◊• ◊†◊ô◊ñ◊ï◊ß. ◊ê◊†◊ê ◊†◊°◊ï ◊ú◊î◊¢◊ú◊ï◊™ ◊™◊û◊ï◊†◊î ◊ê◊ó◊®◊™.';
        case 'storage/canceled':
            return '◊î◊¢◊ú◊ê◊™ ◊î◊™◊û◊ï◊†◊î ◊ë◊ï◊ò◊ú◊î.';
        case 'storage/invalid-event-name':
            return '◊©◊í◊ô◊ê◊î ◊ë◊î◊¢◊ú◊ê◊™ ◊î◊™◊û◊ï◊†◊î. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊ï◊ë.';
        case 'storage/invalid-url':
            return '◊õ◊™◊ï◊ë◊™ ◊î◊™◊û◊ï◊†◊î ◊ú◊ê ◊™◊ß◊ô◊†◊î. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊ï◊ë.';
        case 'storage/invalid-argument':
            return '◊§◊®◊û◊ò◊®◊ô◊ù ◊ú◊ê ◊™◊ß◊ô◊†◊ô◊ù. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊ï◊ë.';
        case 'storage/no-default-bucket':
            return '◊©◊í◊ô◊ê◊î ◊ë◊©◊®◊™ ◊î◊ê◊ó◊°◊ï◊ü. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.';
        case 'storage/cannot-slice-blob':
            return '◊î◊ß◊ï◊ë◊• ◊í◊ì◊ï◊ú ◊û◊ì◊ô. ◊ê◊†◊ê ◊ë◊ó◊®◊ï ◊™◊û◊ï◊†◊î ◊ß◊ò◊†◊î ◊ô◊ï◊™◊®.';
        case 'storage/server-file-wrong-size':
            return '◊í◊ï◊ì◊ú ◊î◊ß◊ï◊ë◊• ◊ú◊ê ◊™◊ï◊ê◊ù. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊ï◊ë.';
        default:
            if (error.message && error.message.includes('network')) {
                return '◊©◊í◊ô◊ê◊™ ◊®◊©◊™. ◊ê◊†◊ê ◊ë◊ì◊ß◊ï ◊ê◊™ ◊î◊ó◊ô◊ë◊ï◊® ◊ú◊ê◊ô◊†◊ò◊®◊†◊ò ◊ï◊†◊°◊ï ◊©◊ï◊ë.';
            }
            if (error.message && error.message.includes('permission')) {
                return '◊ê◊ô◊ü ◊î◊®◊©◊ê◊î ◊ú◊î◊¢◊ú◊ï◊™ ◊™◊û◊ï◊†◊ï◊™. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊ï◊ë.';
            }
            if (error.message && error.message.includes('size')) {
                return '◊î◊™◊û◊ï◊†◊î ◊í◊ì◊ï◊ú◊î ◊û◊ì◊ô. ◊ê◊†◊ê ◊ë◊ó◊®◊ï ◊™◊û◊ï◊†◊î ◊ß◊ò◊†◊î ◊ô◊ï◊™◊®.';
            }
            return `◊©◊í◊ô◊ê◊î ◊ë◊î◊¢◊ú◊ê◊™ ◊î◊™◊û◊ï◊†◊î: ${error.message || '◊©◊í◊ô◊ê◊î ◊ú◊ê ◊ô◊ì◊ï◊¢◊î'}`;
    }
}

// Photo Album Handlers
async function handlePhotoUpload() {
    const input = document.getElementById('photo-upload-input');
    const files = input.files;
    
    if (files.length === 0) return;
    
    // Show progress bar
    const progressContainer = document.getElementById('photo-upload-progress');
    const progressBar = document.getElementById('photo-progress-bar');
    progressContainer.classList.remove('hidden');
    
    // Upload files to Firebase Storage
    for (let index = 0; index < files.length; index++) {
        const file = files[index];
        try {
            const progress = ((index + 1) / files.length) * 100;
            progressBar.style.width = `${progress}%`;
            
            // Validate file before upload
            console.log('Uploading file:', {
                name: file.name,
                size: file.size,
                type: file.type,
                userId: userId,
                storageAvailable: !!storage
            });
            
            // Check file size (max 10MB)
            if (file.size > 10 * 1024 * 1024) {
                throw new Error('◊î◊™◊û◊ï◊†◊î ◊í◊ì◊ï◊ú◊î ◊û◊ì◊ô. ◊ê◊†◊ê ◊ë◊ó◊®◊ï ◊™◊û◊ï◊†◊î ◊ß◊ò◊†◊î ◊û-10MB.');
            }
            
            // Check file type
            if (!file.type.startsWith('image/')) {
                throw new Error('◊ê◊†◊ê ◊ë◊ó◊®◊ï ◊ß◊ï◊ë◊• ◊™◊û◊ï◊†◊î ◊ë◊ú◊ë◊ì.');
            }
            
            // Upload to Firebase Storage
            const timestamp = Date.now();
            const fileName = `${timestamp}-${file.name.replace(/[^a-zA-Z0-9.-]/g, '_')}`;
            const storageRef = ref(storage, `trip-photos/${userId}/${fileName}`);
            
            console.log('Uploading to storage path:', `trip-photos/${userId}/${fileName}`);
            
            await uploadBytes(storageRef, file);
            const url = await getDownloadURL(storageRef);
            
            console.log('Upload successful, URL:', url);
            
            const photoData = {
                url: url,
                caption: `◊™◊û◊ï◊†◊î ${index + 1}`,
                timestamp: timestamp,
                uploadedBy: userId
            };
            
            // Update local state for immediate UI feedback
            if (!currentData.photoAlbum) currentData.photoAlbum = [];
            currentData.photoAlbum.push(photoData);
            
            // Save to Firebase for persistence
            const publicDataRef = doc(db, `artifacts/${appId}/public/genevaGuide`);
            await updateDoc(publicDataRef, { 
                photoAlbum: arrayUnion(photoData)
            });
            
            // Re-render photo album using correct import
            import(`./ui.js?v=${VERSION}`).then(({ renderPhotoAlbum }) => {
                renderPhotoAlbum();
            });
            
            // Show success message for first upload
            if (index === 0) {
                familyToast.success(`◊™◊û◊ï◊†◊î ${index + 1} ◊î◊ï◊¢◊ú◊™◊î ◊ë◊î◊¶◊ú◊ó◊î! üì∏`);
            }
            
        } catch (error) {
            console.error('Photo upload failed:', error);
            console.error('Error details:', {
                code: error.code,
                message: error.message,
                fileName: file.name,
                fileSize: file.size,
                fileType: file.type
            });
            
            // Show user-friendly error message
            const errorMessage = getFirebaseErrorMessage(error);
            familyToast.error(`◊©◊í◊ô◊ê◊î ◊ë◊î◊¢◊ú◊ê◊™ ${file.name}: ${errorMessage}`);
            
            // Fallback to local URL if Firebase fails
            const url = URL.createObjectURL(file);
            const photoData = {
                url: url,
                caption: `◊™◊û◊ï◊†◊î ${index + 1} (◊û◊ß◊ï◊û◊ô◊™)`,
                timestamp: Date.now(),
                objectURL: url,
                isLocal: true, // Mark as local fallback
                uploadError: error.message
            };
            
            if (!currentData.photoAlbum) currentData.photoAlbum = [];
            currentData.photoAlbum.push(photoData);
            
            import(`./ui.js?v=${VERSION}`).then(({ renderPhotoAlbum }) => {
                renderPhotoAlbum();
            });
        }
    }
    
    // Hide progress bar after completion
    setTimeout(() => {
        progressContainer.classList.add('hidden');
        progressBar.style.width = '0%';
    }, 1000);
    
    // Clear input
    input.value = '';
}

// Bulletin Board Handlers
function handleAddBulletinNote() {
    const input = document.getElementById('bulletin-note-input');
    const content = input.value.trim();
    
    if (!content) return;
    
    const noteData = {
        content: content,
        timestamp: Date.now()
    };
    
    // Update local state
    if (!currentData.bulletinBoard) currentData.bulletinBoard = [];
    currentData.bulletinBoard.unshift(noteData);
    // Attempt persistence (non-blocking)
    try {
        const publicDataRef = doc(db, `artifacts/${appId}/public/genevaGuide`);
        updateDoc(publicDataRef, { bulletinBoard: arrayUnion(noteData) }).catch(() => {});
    } catch (_) {}
    renderBulletinBoard();
    
    // Clear input
    input.value = '';
}

// Family Memories Handlers
function handleAddMemory() {
    const titleInput = document.getElementById('memory-title-input');
    const contentInput = document.getElementById('memory-content-input');
    
    const title = titleInput.value.trim();
    const content = contentInput.value.trim();
    
    if (!title || !content) {
        alert('◊ê◊†◊ê ◊û◊ú◊ê◊ï ◊í◊ù ◊õ◊ï◊™◊®◊™ ◊ï◊í◊ù ◊™◊ï◊õ◊ü ◊ú◊ñ◊ô◊õ◊®◊ï◊ü');
        return;
    }
    
    const memoryData = {
        title: title,
        content: content,
        timestamp: Date.now()
    };
    
    // Update local state
    if (!currentData.familyMemories) currentData.familyMemories = [];
    currentData.familyMemories.unshift(memoryData);
    // Attempt persistence (non-blocking)
    try {
        const publicDataRef = doc(db, `artifacts/${appId}/public/genevaGuide`);
        updateDoc(publicDataRef, { familyMemories: arrayUnion(memoryData) }).catch(() => {});
    } catch (_) {}
    renderFamilyMemories();
    
    // Clear inputs
    titleInput.value = '';
    contentInput.value = '';
}

// Interactive Packing Handlers
function handleAddPackingItem() {
    const input = document.getElementById('packing-item-input');
    const itemName = input.value.trim();
    
    if (!itemName) return;
    
    const packingItem = {
        name: itemName,
        checked: false,
        timestamp: Date.now()
    };
    
    // Update local state
    if (!currentData.interactivePacking) currentData.interactivePacking = [];
    currentData.interactivePacking.push(packingItem);
    // Attempt persistence (non-blocking)
    try {
        const publicDataRef = doc(db, `artifacts/${appId}/public/genevaGuide`);
        updateDoc(publicDataRef, { interactivePacking: arrayUnion(packingItem) }).catch(() => {});
    } catch (_) {}
    renderInteractivePackingList();
    
    // Clear input
    input.value = '';
}


// Handle delete actions for dynamic content
function handleDeleteAction(target) {
    // Delete bulletin note
    if (target.classList.contains('delete-note')) {
        const noteIndex = parseInt(target.dataset.noteIndex);
        if (currentData.bulletinBoard) {
            currentData.bulletinBoard.splice(noteIndex, 1);
            renderBulletinBoard();
        }
    }
    
    // Delete memory
    if (target.classList.contains('delete-memory')) {
        const memoryIndex = parseInt(target.dataset.memoryIndex);
        if (currentData.familyMemories) {
            currentData.familyMemories.splice(memoryIndex, 1);
            renderFamilyMemories();
        }
    }
    
    // Delete packing item
    if (target.classList.contains('delete-packing-item')) {
        const itemIndex = parseInt(target.dataset.itemIndex);
        if (currentData.interactivePacking) {
            currentData.interactivePacking.splice(itemIndex, 1);
            renderInteractivePackingList();
        }
    }
    
    // Delete photo with proper cleanup
    if (target.classList.contains('delete-photo')) {
        const photoIndex = parseInt(target.dataset.photoIndex);
        if (currentData.photoAlbum && currentData.photoAlbum[photoIndex]) {
            const photo = currentData.photoAlbum[photoIndex];
            // Clean up object URL to prevent memory leak
            if (photo.objectURL) {
                URL.revokeObjectURL(photo.objectURL);
            }
            currentData.photoAlbum.splice(photoIndex, 1);
            renderPhotoAlbum();
        }
    }
}

// Photo modal functionality
function openPhotoModal(photoIndex) {
    const modal = document.getElementById('photo-modal');
    const img = document.getElementById('photo-modal-image');
    const dateEl = document.getElementById('photo-modal-date');
    const captionEl = document.getElementById('photo-modal-caption');
    
    if (!currentData.photoAlbum || !currentData.photoAlbum[photoIndex]) return;
    
    const photo = currentData.photoAlbum[photoIndex];
    
    img.src = photo.url;
    img.alt = photo.caption || '◊™◊û◊ï◊†◊î ◊û◊©◊§◊ó◊™◊ô◊™';
    dateEl.textContent = new Date(photo.timestamp).toLocaleDateString('he-IL');
    captionEl.textContent = photo.caption || '';
    
    // Store current photo index for navigation
    modal.dataset.currentPhoto = photoIndex;
    
    modal.classList.remove('hidden');
}

// Initialize fullscreen map in modal
function initFullscreenMap() {
    const fullscreenMapContainer = document.getElementById('fullscreen-map');
    if (!fullscreenMapContainer || !window.L) return;
    
    // Clear any existing map
    fullscreenMapContainer.innerHTML = '';
    
    // Create new map instance
    const fullscreenMap = L.map('fullscreen-map', { 
        zoomControl: true, 
        attributionControl: true 
    });
    
    // Set view and add tiles
    fullscreenMap.setView([46.2183, 6.0744], 11);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors'
    }).addTo(fullscreenMap);
    
    // Add hotel marker
    const hotelIcon = L.divIcon({
        html: 'üè®',
        iconSize: [30, 30],
        className: 'hotel-marker'
    });
    
    L.marker([46.2183, 6.0744], {icon: hotelIcon})
        .bindPopup('üè® Mercure Hotel Meyrin<br/>◊î◊û◊ú◊ï◊ü ◊©◊ú◊õ◊ù')
        .addTo(fullscreenMap);
    
    // Add activity markers if available
    if (currentData && currentData.activitiesData) {
        currentData.activitiesData.forEach(activity => {
            if (activity.lat && activity.lon) {
                const icon = L.divIcon({
                    html: activity.category === '◊û◊©◊ó◊ß◊ô◊ô◊î' ? 'üéà' : 
                          activity.category === '◊™◊®◊ë◊ï◊™' ? 'üé®' :
                          activity.category === '◊ß◊§◊î' ? '‚òï' : 
                          activity.category === '◊ó◊ï◊•' ? 'üå≥' : 'üìç',
                    iconSize: [25, 25],
                    className: 'activity-marker'
                });
                
                L.marker([activity.lat, activity.lon], {icon: icon})
                    .bindPopup(`<strong>${activity.name}</strong><br/>${activity.description}`)
                    .addTo(fullscreenMap);
            }
        });
    }
    
    // Force map resize after modal is fully open
    setTimeout(() => {
        fullscreenMap.invalidateSize();
    }, 100);
}

export function handleSwapActivity(button) {
    console.log('üîÑ Swap activity button clicked:', button);
    const dayIndex = parseInt(button.dataset.dayIndex || 0);
    console.log('üìÖ Day index:', dayIndex);
    console.log('üìä Current data:', currentData);
    console.log('üìã Itinerary data:', currentData?.itineraryData);
    
    // Check if we have itinerary data at all
    if (!currentData?.itineraryData || !Array.isArray(currentData.itineraryData)) {
        console.log('‚ùå No itinerary data available');
        alert('◊ú◊ê ◊†◊û◊¶◊ê◊ï ◊†◊™◊ï◊†◊ô ◊™◊ï◊õ◊†◊ô◊™. ◊ê◊†◊ê ◊ï◊ì◊ê ◊©◊î◊™◊ï◊õ◊†◊ô◊™ ◊†◊ò◊¢◊†◊î ◊õ◊®◊ê◊ï◊ô.');
        return;
    }
    
    // Check if the requested day exists
    const dayData = currentData.itineraryData[dayIndex];
    console.log('üìÖ Day data for index', dayIndex, ':', dayData);
    
    if (!dayData) {
        console.log('‚ùå No day data found for index:', dayIndex);
        console.log('üìã Available itinerary data length:', currentData.itineraryData.length);
        console.log('üìã Available days:', currentData.itineraryData.map((day, idx) => `Day ${idx + 1}: ${day.dayName || 'Unnamed'}`));
        
        // Provide more helpful error message
        const availableDays = currentData.itineraryData.length;
        const requestedDay = dayIndex + 1;
        
        if (requestedDay > availableDays) {
            alert(`◊î◊™◊ï◊õ◊†◊ô◊™ ◊õ◊ï◊ú◊ú◊™ ◊®◊ß ${availableDays} ◊ô◊û◊ô◊ù. ◊ú◊ê ◊†◊ô◊™◊ü ◊ú◊î◊ó◊ú◊ô◊£ ◊§◊¢◊ô◊ú◊ï◊™ ◊ë◊ô◊ï◊ù ${requestedDay}.`);
        } else {
            alert(`◊ú◊ê ◊†◊û◊¶◊ê◊ï ◊†◊™◊ï◊†◊ô◊ù ◊ú◊ô◊ï◊ù ${requestedDay}. ◊ê◊†◊ê ◊ï◊ì◊ê ◊©◊î◊™◊ï◊õ◊†◊ô◊™ ◊†◊ò◊¢◊†◊î ◊õ◊®◊ê◊ï◊ô.`);
        }
        return;
    }
    
    // Show modal with available activities to swap
    openModal('swap-activity-modal');
    
    // Populate modal with activities from current day and alternatives
    const modalContent = document.getElementById('swap-activity-modal-content');
    if (modalContent && currentData.activitiesData) {
        const availableActivities = currentData.activitiesData.filter(activity => {
            // Filter activities that might be suitable for swapping
            return activity.category === '◊û◊©◊ó◊ß◊ô◊ô◊î' || activity.category === '◊™◊®◊ë◊ï◊™';
        });
        
        console.log('üéØ Available activities for swapping:', availableActivities);
        
        if (availableActivities.length === 0) {
            modalContent.innerHTML = `
                <div class="text-center py-8">
                    <div class="text-6xl mb-4">üéØ</div>
                    <h3 class="text-xl font-bold mb-4">◊ê◊ô◊ü ◊§◊¢◊ô◊ú◊ï◊ô◊ï◊™ ◊ñ◊û◊ô◊†◊ï◊™ ◊ú◊î◊ó◊ú◊§◊î</h3>
                    <p class="text-gray-600 mb-4">◊õ◊®◊í◊¢ ◊ê◊ô◊ü ◊§◊¢◊ô◊ú◊ï◊ô◊ï◊™ ◊û◊™◊ê◊ô◊û◊ï◊™ ◊ú◊î◊ó◊ú◊§◊î ◊ú◊ô◊ï◊ù ◊ñ◊î.</p>
                    <button onclick="document.getElementById('swap-activity-modal').classList.add('hidden')" 
                            class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg">
                        ◊°◊í◊ï◊®
                    </button>
                </div>
            `;
        } else {
            modalContent.innerHTML = `
                <h3 class="text-xl font-bold mb-4">◊î◊ó◊ú◊£ ◊§◊¢◊ô◊ú◊ï◊™ - ${dayData.dayName}</h3>
                <p class="text-gray-600 mb-4">◊ë◊ó◊® ◊§◊¢◊ô◊ú◊ï◊™ ◊ó◊ú◊ï◊§◊ô◊™ ◊û◊î◊®◊©◊ô◊û◊î:</p>
                <div class="grid gap-4 max-h-96 overflow-y-auto">
                    ${availableActivities.map(activity => `
                        <div class="border rounded-lg p-4 hover:bg-blue-50 cursor-pointer activity-swap-option" 
                             data-activity-id="${activity.id}" data-day-index="${dayIndex}">
                            <h4 class="font-semibold">${activity.name}</h4>
                            <p class="text-sm text-gray-600">${activity.description}</p>
                            <div class="text-xs text-gray-500 mt-2">
                                <span>‚è±Ô∏è ${activity.time} ◊ì◊ß◊ï◊™</span> | 
                                <span>üöå ${activity.transport}</span> |
                                <span>üí∞ ${activity.cost}</span>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }
        
        // Add click handlers for activity selection
        modalContent.querySelectorAll('.activity-swap-option').forEach(option => {
            option.addEventListener('click', () => {
                const activityId = parseInt(option.dataset.activityId);
                const dayIdx = parseInt(option.dataset.dayIndex);
                confirmActivitySwap(activityId, dayIdx);
            });
        });
    }
}

function confirmActivitySwap(activityId, dayIndex) {
    const activity = currentData.activitiesData.find(a => a.id === activityId);
    if (!activity) return;
    
    if (confirm(`◊î◊ê◊ù ◊ê◊™◊î ◊ë◊ò◊ï◊ó ◊©◊ë◊®◊¶◊ï◊†◊ö ◊ú◊î◊ï◊°◊ô◊£ ◊ê◊™ "${activity.name}" ◊ú◊™◊õ◊†◊ô◊™ ◊î◊ô◊ï◊ù?`)) {
        // Add the activity to the day's plan (you might want to implement this based on your data structure)
        console.log(`Swapping activity ${activityId} for day ${dayIndex}`);
        
        // Close modal and show success message
        document.getElementById('swap-activity-modal').classList.add('hidden');
        alert(`◊î◊§◊¢◊ô◊ú◊ï◊™ "${activity.name}" ◊†◊ï◊°◊§◊î ◊ú◊™◊õ◊†◊ô◊™!`);
        
        // You could re-render the itinerary here if needed
        // renderItinerary();
    }
}

export function handleDailySpecialAI() {
    const dailyContent = document.getElementById('daily-special-content');
    const currentSpecial = dailyContent ? dailyContent.textContent.replace('◊°◊§◊® ◊ú◊ô ◊¢◊ï◊ì ◊¢◊ú ◊î◊û◊ú◊¶◊î ◊ñ◊ï', '').trim() : '';
    
    if (!currentSpecial) {
        alert('◊ê◊ô◊ü ◊™◊ï◊õ◊ü ◊ñ◊û◊ô◊ü ◊õ◊®◊í◊¢');
        return;
    }
    
    // Create a specific prompt about the daily special
    const prompt = `◊°◊§◊® ◊ú◊ô ◊¢◊ï◊ì ◊§◊®◊ò◊ô◊ù ◊û◊¢◊†◊ô◊ô◊†◊ô◊ù ◊ï◊©◊ô◊û◊ï◊©◊ô◊ô◊ù ◊¢◊ú ${currentSpecial} ◊ë◊ñ'◊†◊ë◊î. ◊™◊õ◊ú◊ï◊ú ◊ò◊ô◊§◊ô◊ù ◊§◊®◊ß◊ò◊ô◊ô◊ù ◊ú◊û◊©◊§◊ó◊ï◊™ ◊¢◊ù ◊ô◊ú◊ì◊ô◊ù ◊ß◊ò◊†◊ô◊ù, ◊©◊¢◊ï◊™ ◊§◊™◊ô◊ó◊î ◊û◊ï◊û◊ú◊¶◊ï◊™, ◊ï◊û◊î ◊õ◊ì◊ê◊ô ◊ú◊î◊õ◊ô◊ü ◊û◊®◊ê◊©.`;
    
    // Show loading state
    openModal('text-response-modal');
    const modalTitle = document.getElementById('text-response-modal-title');
    const modalContent = document.getElementById('text-response-modal-content');
    
    if (modalTitle) modalTitle.textContent = 'üåü ◊û◊ô◊ì◊¢ ◊†◊ï◊°◊£ ◊¢◊ú ◊î◊ê◊ò◊®◊ß◊¶◊ô◊î ◊î◊ô◊ï◊û◊ô◊™';
    if (modalContent) modalContent.innerHTML = '<div class="text-center py-8"><div class="loader mx-auto"></div><p class="mt-4 text-gray-600">◊ê◊ï◊°◊£ ◊û◊ô◊ì◊¢ ◊†◊ï◊°◊£...</p></div>';
    
    // Send to AI service
    handleChatSendWithPrompt(prompt);
    
    const chatContainer = document.getElementById('chat-container');
    if (chatContainer) {
        const prompt = `◊°◊§◊® ◊ú◊ô ◊¢◊ï◊ì ◊¢◊ú ◊î◊î◊û◊ú◊¶◊î ◊î◊ô◊ï◊û◊ô◊™ ◊î◊ñ◊ï: "${currentSpecial.substring(0, 200)}..."`;
        
        // Add user message to chat
        const userMessage = document.createElement('div');
        userMessage.className = 'message user-message';
        userMessage.innerHTML = `<p>${sanitizeHTML(prompt)}</p>`;
        chatContainer.appendChild(userMessage);
        
        // Send to AI
        handleChatSendWithPrompt(prompt);
    }
}

export function handleWhatToWearRequest() {
    // Get weather data from currentData instead of DOM parsing
    if (!currentData || !currentData.weather || !currentData.weather.daily) {
        // If no weather data, fetch it first
        import(`./services.js?v=${VERSION}`).then(({ fetchAndRenderWeather }) => {
            fetchAndRenderWeather().then(() => {
                // Try again after weather is fetched
                setTimeout(() => handleWhatToWearRequest(), 1000);
            });
        });
        
        openModal('text-response-modal');
        const modalTitle = document.getElementById('text-response-modal-title');
        const modalContent = document.getElementById('text-response-modal-content');
        
        if (modalTitle) modalTitle.textContent = 'üëï ◊î◊û◊ú◊¶◊ï◊™ ◊ú◊ë◊ï◊© ◊î◊ô◊ï◊ù';
        if (modalContent) modalContent.innerHTML = '<div class="text-center py-8"><div class="loader mx-auto"></div><p class="mt-4 text-gray-600">◊ò◊ï◊¢◊ü ◊†◊™◊ï◊†◊ô ◊û◊ñ◊í ◊ê◊ï◊ï◊ô◊®...</p></div>';
        return;
    }
    
    // Get today's weather from the data
    const today = currentData.weather.daily;
    const todayTemp = Math.round(today.temperature_2m_max[0]);
    const todayMinTemp = Math.round(today.temperature_2m_min[0]);
    const weatherCode = today.weathercode[0];
    
    // Simple weather condition mapping
    const weatherConditions = {
        0: '◊©◊û◊© ◊ë◊î◊ô◊®',
        1: '◊©◊û◊© ◊¢◊ù ◊¢◊†◊†◊ô◊ù ◊ß◊ú◊ô◊ù',
        2: '◊ó◊ú◊ß◊ô◊™ ◊û◊¢◊ï◊†◊ü',
        3: '◊û◊¢◊ï◊†◊ü',
        45: '◊¢◊®◊§◊ú',
        48: '◊¢◊®◊§◊ú ◊ß◊§◊ï◊ê',
        51: '◊ò◊§◊ò◊ï◊£ ◊ß◊ú',
        53: '◊ò◊§◊ò◊ï◊£ ◊ë◊ô◊†◊ï◊†◊ô',
        55: '◊ò◊§◊ò◊ï◊£ ◊ó◊ñ◊ß',
        61: '◊í◊©◊ù ◊ß◊ú',
        63: '◊í◊©◊ù ◊ë◊ô◊†◊ï◊†◊ô',
        65: '◊í◊©◊ù ◊ó◊ñ◊ß',
        71: '◊©◊ú◊í ◊ß◊ú',
        73: '◊©◊ú◊í ◊ë◊ô◊†◊ï◊†◊ô',
        75: '◊©◊ú◊í ◊ó◊ñ◊ß'
    };
    
    const condition = weatherConditions[weatherCode] || '◊û◊ñ◊í ◊ê◊ï◊ï◊ô◊® ◊û◊©◊™◊†◊î';
    const weatherSummary = `◊ò◊û◊§◊®◊ò◊ï◊®◊î: ${todayTemp}¬∞C (◊û◊ô◊†◊ô◊û◊ï◊ù ${todayMinTemp}¬∞C), ◊û◊ñ◊í ◊ê◊ï◊ï◊ô◊®: ${condition}`;
    
    const prompt = `◊ë◊î◊™◊ë◊°◊° ◊¢◊ú ◊û◊ñ◊í ◊î◊ê◊ï◊ï◊ô◊® ◊ë◊ñ'◊†◊ë◊î ◊î◊ô◊ï◊ù (${weatherSummary}), ◊î◊û◊ú◊• ◊¢◊ú ◊ú◊ë◊ï◊© ◊û◊™◊ê◊ô◊ù ◊ú◊û◊©◊§◊ó◊î ◊¢◊ù ◊ô◊ú◊ì◊ô◊ù ◊ß◊ò◊†◊ô◊ù (◊í◊ô◊ú◊ê◊ô 2-3) ◊ú◊ò◊ô◊ï◊ú ◊ô◊ï◊ù ◊©◊ú◊ù. 

◊õ◊ú◊ï◊ú ◊î◊û◊ú◊¶◊ï◊™ ◊°◊§◊¶◊ô◊§◊ô◊ï◊™:
- ◊ú◊ô◊ú◊ì◊ô◊ù: ◊ë◊í◊ì◊ô◊ù, ◊†◊¢◊ú◊ô◊ô◊ù, ◊ê◊ë◊ô◊ñ◊®◊ô◊ù
- ◊ú◊î◊ï◊®◊ô◊ù: ◊ú◊ë◊ï◊© ◊û◊™◊ê◊ô◊ù ◊ú◊ú◊ô◊ï◊ï◊ô ◊ô◊ú◊ì◊ô◊ù
- ◊©◊õ◊ë◊ï◊™ ◊ë◊í◊ì◊ô◊ù ◊ú◊§◊ô ◊î◊ò◊û◊§◊®◊ò◊ï◊®◊î
- ◊ê◊ë◊ô◊ñ◊®◊ô◊ù ◊†◊ï◊°◊§◊ô◊ù (◊û◊ò◊®◊ô◊î, ◊õ◊ï◊ë◊¢, ◊ß◊®◊ù ◊î◊í◊†◊î, ◊í'◊ß◊ò)
- ◊î◊û◊ú◊¶◊ï◊™ ◊û◊ô◊ï◊ó◊ì◊ï◊™ ◊ú◊ò◊ô◊ï◊ú ◊¢◊ô◊®◊ï◊†◊ô ◊ë◊ñ'◊†◊ë◊î

◊™◊ü ◊ì◊í◊© ◊¢◊ú ◊†◊ï◊ó◊ï◊™, ◊§◊®◊ß◊ò◊ô◊ï◊™ ◊ï◊û◊ñ◊í ◊î◊ê◊ï◊ï◊ô◊® ◊î◊û◊ß◊ï◊û◊ô ◊©◊ú ◊î◊ô◊ï◊ù.`;
    
    // Show loading state
    openModal('text-response-modal');
    const modalTitle = document.getElementById('text-response-modal-title');
    const modalContent = document.getElementById('text-response-modal-content');
    
    if (modalTitle) modalTitle.textContent = 'üëï ◊î◊û◊ú◊¶◊ï◊™ ◊ú◊ë◊ï◊© ◊ú◊ò◊ô◊ï◊ú ◊î◊ô◊ï◊ù';
    if (modalContent) modalContent.innerHTML = '<div class="text-center py-8"><div class="loader mx-auto"></div><p class="mt-4 text-gray-600">◊ë◊ï◊ó◊® ◊ê◊™ ◊î◊ë◊í◊ì◊ô◊ù ◊î◊û◊ï◊©◊ú◊û◊ô◊ù...</p></div>';
    
    // Send to AI service
    handleChatSendWithPrompt(prompt);
}

export function handleChatSendWithPrompt(prompt) {
    // Check if we're in the text response modal or chat modal
    const textResponseModal = document.querySelector('#text-response-modal:not(.hidden)');
    const chatModal = document.querySelector('#gemini-chat-modal:not(.hidden)');
    
    if (textResponseModal) {
        // Handle response in text response modal
        const modalContent = document.getElementById('text-response-modal-content');
        if (!modalContent) return;
        
        // Show loading
        modalContent.innerHTML = '<div class="text-center py-8"><div class="loader mx-auto"></div><p class="mt-4 text-gray-600">◊û◊õ◊ô◊ü ◊™◊©◊ï◊ë◊î ◊û◊§◊ï◊®◊ò◊™...</p></div>';
        
        // Call AI service
        callGeminiWithParts([{ text: prompt }])
            .then(response => {
                modalContent.innerHTML = `<div class="prose prose-lg max-w-none rtl:text-right leading-relaxed">${sanitizeHTML(response)}</div>`;
            })
            .catch(error => {
                console.warn('AI request failed:', error);
                modalContent.innerHTML = '<div class="text-red-600 text-center py-8">◊©◊í◊ô◊ê◊î ◊ë◊ß◊ë◊ú◊™ ◊™◊©◊ï◊ë◊î ◊û◊î◊û◊¢◊®◊õ◊™. ◊ê◊†◊ê ◊†◊°◊ï ◊©◊†◊ô◊™ ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.</div>';
            });
            
    } else if (chatModal) {
        // Handle response in chat modal
        const chatContainer = document.getElementById('chat-messages');
        if (!chatContainer) return;
        
        // Add user message
        const userMessage = document.createElement('div');
        userMessage.className = 'chat-bubble user';
        userMessage.textContent = prompt;
        chatContainer.appendChild(userMessage);
        
        // Show loader
        const loader = document.getElementById('chat-loader');
        if (loader) loader.classList.remove('hidden');
        
        // Call AI service
        callGeminiWithParts([{ text: prompt }])
            .then(response => {
                // Add AI response
                const aiMessage = document.createElement('div');
                aiMessage.className = 'chat-bubble gemini';
                aiMessage.textContent = response;
                chatContainer.appendChild(aiMessage);
                
                // Scroll to bottom
                chatContainer.scrollTop = chatContainer.scrollHeight;
            })
            .catch(error => {
                console.warn('AI request failed:', error);
                const errorMessage = document.createElement('div');
                errorMessage.className = 'chat-bubble error';
                errorMessage.textContent = '◊©◊í◊ô◊ê◊î ◊ë◊ß◊ë◊ú◊™ ◊™◊©◊ï◊ë◊î ◊û◊î◊û◊¢◊®◊õ◊™';
                chatContainer.appendChild(errorMessage);
            })
            .finally(() => {
                if (loader) loader.classList.add('hidden');
            });
    }
}

export function handleAddToPlan() {
    // Get the current daily special content
    const dailyContent = document.getElementById('daily-special-content');
    if (!dailyContent) {
        alert('◊ú◊ê ◊†◊ô◊™◊ü ◊ú◊û◊¶◊ï◊ê ◊î◊û◊ú◊¶◊î ◊ú◊î◊ï◊°◊§◊î');
        return;
    }
    
    const specialText = dailyContent.textContent.replace('◊°◊§◊® ◊ú◊ô ◊¢◊ï◊ì ◊¢◊ú ◊î◊û◊ú◊¶◊î ◊ñ◊ï', '').trim();
    
    // For now, just show confirmation - you could integrate with the actual planning system
    const confirmation = confirm(`◊î◊ê◊ù ◊ë◊®◊¶◊ï◊†◊ö ◊ú◊î◊ï◊°◊ô◊£ ◊ê◊™ ◊î◊î◊û◊ú◊¶◊î ◊î◊ñ◊ï ◊ú◊û◊°◊ú◊ï◊ú ◊©◊ú◊ö?\n\n"${specialText}"`);
    
    if (confirmation) {
        // Here you would add actual integration with the planning system
        // For example, add it to currentData.itineraryData or create a new plan item
        
        alert('◊î◊î◊û◊ú◊¶◊î ◊†◊ï◊°◊§◊î ◊ë◊î◊¶◊ú◊ó◊î ◊ú◊û◊°◊ú◊ï◊ú ◊©◊ú◊ö! üéâ');
        
        // You could also update the UI to reflect the addition
        // For example, scroll to the plan section or highlight the new item
        const planSection = document.getElementById('plan');
        if (planSection) {
            planSection.scrollIntoView({ behavior: 'smooth' });
        }
    }
}

export function handleOptimizeLuggage() {
    if (!currentData.packingListData || !currentData.luggageData) {
        alert('◊ê◊ô◊ü ◊û◊°◊§◊ô◊ß ◊†◊™◊ï◊†◊ô◊ù ◊ú◊î◊§◊¢◊ú◊™ ◊ê◊ï◊§◊ò◊ô◊û◊ô◊ñ◊¶◊ô◊î ◊ê◊ï◊ò◊ï◊û◊ò◊ô◊™');
        return;
    }
    
    // Simple optimization logic - distribute items based on weight and importance
    const heavyItems = ['◊û◊¢◊ô◊ú ◊í◊©◊ù', '◊†◊¢◊ú◊ô◊ô◊ù', '◊û◊ï◊¶◊®◊ô ◊ò◊ô◊§◊ï◊ó'];
    const essentialItems = ['◊ì◊®◊õ◊ï◊†◊ô◊ù', '◊õ◊®◊ò◊ô◊°◊ô ◊ò◊ô◊°◊î', '◊™◊®◊ï◊§◊ï◊™'];
    const childrenItems = ['◊ó◊ô◊™◊ï◊ú◊ô◊ù', '◊ë◊í◊ì◊ô ◊ô◊ú◊ì◊ô◊ù', '◊¶◊¢◊¶◊ï◊¢◊ô◊ù'];
    
    // Clear existing assignments
    if (currentData.luggageData) {
        currentData.luggageData.forEach(bag => {
            bag.items = [];
        });
        
        // Distribute items based on logic
        Object.entries(currentData.packingListData).forEach(([category, items]) => {
            if (Array.isArray(items)) {
                items.forEach(item => {
                    if (item.checked) {
                        let targetBagIndex = 0; // Default to main suitcase
                        
                        if (essentialItems.some(essential => item.name.includes(essential))) {
                            targetBagIndex = 1; // Carry-on
                        } else if (childrenItems.some(child => item.name.includes(child))) {
                            targetBagIndex = 2; // Backpack
                        } else if (heavyItems.some(heavy => item.name.includes(heavy))) {
                            targetBagIndex = 0; // Main suitcase
                        }
                        
                        if (!currentData.luggageData[targetBagIndex].items) {
                            currentData.luggageData[targetBagIndex].items = [];
                        }
                        currentData.luggageData[targetBagIndex].items.push(item.name);
                    }
                });
            }
        });
        
        // Re-render the luggage planner
        import(`./ui.js?v=${VERSION}`).then(({ renderLuggagePlanner }) => {
            if (renderLuggagePlanner) renderLuggagePlanner();
        });
        
        alert('◊î◊ê◊ï◊§◊ò◊ô◊û◊ô◊ñ◊¶◊ô◊î ◊î◊ï◊©◊ú◊û◊î! ◊î◊§◊®◊ô◊ò◊ô◊ù ◊ó◊ï◊ú◊ß◊ï ◊ë◊ê◊ï◊§◊ü ◊ó◊õ◊ù ◊ë◊ô◊ü ◊î◊û◊ñ◊ï◊ï◊ì◊ï◊™ üéØ');
    }
}

// Handle smart packing analysis with AI image recognition
export async function handleSmartPackingAnalysis() {
    const luggageInput = document.getElementById('luggage-photo-input');
    const itemsInput = document.getElementById('items-photo-input');
    const analysisSection = document.getElementById('smart-packing-analysis');
    const resultsContainer = document.getElementById('analysis-results');
    
    // Check if we have uploaded images
    const luggageFiles = luggageInput?.files || [];
    const itemsFiles = itemsInput?.files || [];
    
    if (luggageFiles.length === 0 && itemsFiles.length === 0) {
        alert('◊ê◊†◊ê ◊î◊¢◊ú◊ï ◊ú◊§◊ó◊ï◊™ ◊™◊û◊ï◊†◊î ◊ê◊ó◊™ ◊©◊ú ◊î◊û◊ñ◊ï◊ï◊ì◊ï◊™ ◊ê◊ï ◊î◊§◊®◊ô◊ò◊ô◊ù ◊õ◊ì◊ô ◊ú◊ß◊ë◊ú ◊†◊ô◊™◊ï◊ó ◊ó◊õ◊ù');
        return;
    }
    
    // Show loading state
    if (analysisSection) {
        analysisSection.classList.remove('hidden');
        resultsContainer.innerHTML = '<div class="text-center py-4"><div class="loader mx-auto"></div><p class="mt-2 text-gray-600">◊û◊†◊™◊ó ◊™◊û◊ï◊†◊ï◊™ ◊¢◊ù AI...</p></div>';
    }
    
    try {
        // Convert images to base64
        const luggageImages = await Promise.all(
            Array.from(luggageFiles).map(file => convertToBase64(file))
        );
        const itemsImages = await Promise.all(
            Array.from(itemsFiles).map(file => convertToBase64(file))
        );
        
        // Prepare prompt for Gemini with vision
        const prompt = `◊ê◊†◊ô ◊û◊™◊õ◊†◊ü ◊ò◊ô◊ï◊ú ◊û◊©◊§◊ó◊™◊ô ◊ú◊ñ'◊†◊ë◊î ◊¢◊ù ◊ô◊ú◊ì◊ô◊ù ◊ß◊ò◊†◊ô◊ù ◊ï◊ê◊†◊ô ◊¶◊®◊ô◊ö ◊¢◊ñ◊®◊î ◊ë◊ê◊®◊ô◊ñ◊î ◊ó◊õ◊û◊î.

◊î◊ß◊©◊®:
- ◊†◊ï◊°◊¢◊ô◊ù: ◊û◊©◊§◊ó◊î ◊¢◊ù 2 ◊û◊ë◊ï◊í◊®◊ô◊ù ◊ï-2 ◊ô◊ú◊ì◊ô◊ù ◊ß◊ò◊†◊ô◊ù (◊§◊¢◊ï◊ò◊ï◊™)
- ◊ô◊¢◊ì: ◊ñ'◊†◊ë◊î, ◊©◊ï◊ï◊ô◊ô◊•
- ◊û◊©◊ö: 5 ◊ô◊û◊ô◊ù
- ◊¢◊ï◊†◊î: ◊ß◊ô◊• (◊ê◊ï◊í◊ï◊°◊ò)

${luggageImages.length > 0 ? `◊™◊û◊ï◊†◊ï◊™ ◊û◊ñ◊ï◊ï◊ì◊ï◊™ (${luggageImages.length}): ◊ê◊†◊ê ◊†◊™◊ó ◊ê◊™ ◊î◊í◊ï◊ì◊ú, ◊î◊¶◊ï◊®◊î ◊ï◊î◊û◊ê◊§◊ô◊ô◊†◊ô◊ù ◊©◊ú ◊î◊û◊ñ◊ï◊ï◊ì◊ï◊™` : ''}
${itemsImages.length > 0 ? `◊™◊û◊ï◊†◊ï◊™ ◊§◊®◊ô◊ò◊ô◊ù (${itemsImages.length}): ◊ê◊†◊ê ◊ñ◊î◊î ◊ê◊™ ◊î◊§◊®◊ô◊ò◊ô◊ù ◊©◊®◊ï◊¶◊î ◊ú◊ê◊®◊ï◊ñ` : ''}

◊ê◊†◊ê ◊°◊§◊ß ◊î◊û◊ú◊¶◊ï◊™ ◊û◊§◊ï◊®◊ò◊ï◊™ ◊¢◊ë◊ï◊®:
1. ◊ê◊ô◊ö ◊ú◊ê◊®◊í◊ü ◊ê◊™ ◊î◊§◊®◊ô◊ò◊ô◊ù ◊ë◊û◊ñ◊ï◊ï◊ì◊ï◊™ ◊ë◊¶◊ï◊®◊î ◊ô◊¢◊ô◊ú◊î
2. ◊ê◊ô◊ñ◊î ◊§◊®◊ô◊ò◊ô◊ù ◊û◊™◊ê◊ô◊û◊ô◊ù ◊ú◊õ◊ú ◊û◊ñ◊ï◊ï◊ì◊î (◊¢◊ì◊ô◊§◊ï◊ô◊ï◊™)
3. ◊ò◊ô◊§◊ô◊ù ◊ú◊ê◊®◊ô◊ñ◊î ◊ó◊õ◊û◊î ◊ú◊ò◊ô◊ï◊ú ◊¢◊ù ◊ô◊ú◊ì◊ô◊ù
4. ◊§◊®◊ô◊ò◊ô◊ù ◊ó◊©◊ï◊ë◊ô◊ù ◊©◊ó◊°◊®◊ô◊ù (◊ê◊ù ◊ô◊©)
5. ◊î◊™◊ê◊û◊™ ◊î◊ê◊®◊ô◊ñ◊î ◊ú◊™◊†◊ê◊ô ◊û◊ñ◊í ◊î◊ê◊ï◊ï◊ô◊® ◊ë◊ñ'◊†◊ë◊î

◊§◊ï◊®◊û◊ò ◊î◊™◊í◊ï◊ë◊î ◊ë◊¢◊ë◊®◊ô◊™, ◊ô◊î◊ô◊î ◊û◊û◊ï◊ß◊ì ◊ï◊û◊¢◊©◊ô.`;

        // Prepare images for Gemini
        const imageParts = [];
        
        // Add luggage images
        luggageImages.forEach((imageData, index) => {
            imageParts.push({
                inlineData: {
                    data: imageData.split(',')[1], // Remove data:image/... prefix
                    mimeType: 'image/jpeg'
                }
            });
        });
        
        // Add items images
        itemsImages.forEach((imageData, index) => {
            imageParts.push({
                inlineData: {
                    data: imageData.split(',')[1],
                    mimeType: 'image/jpeg'
                }
            });
        });
        
        // Call Gemini with text and images
        const response = await callGeminiWithParts([prompt, ...imageParts]);
        
        // Display results
        if (resultsContainer) {
            resultsContainer.innerHTML = `
                <div class="space-y-4">
                    <div class="bg-green-50 border-l-4 border-green-400 p-4 rounded">
                        <h6 class="font-semibold text-green-800 mb-2">üìã ◊†◊ô◊™◊ï◊ó AI ◊î◊ï◊©◊ú◊ù ◊ë◊î◊¶◊ú◊ó◊î</h6>
                        <div class="text-sm text-green-700 leading-relaxed whitespace-pre-line">${response}</div>
                    </div>
                    <div class="flex gap-2 justify-center">
                        <button id="apply-ai-suggestions-btn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm">
                            ‚úÖ ◊î◊ó◊ú ◊î◊û◊ú◊¶◊ï◊™ ◊¢◊ú ◊î◊û◊™◊õ◊†◊ü
                        </button>
                        <button id="regenerate-analysis-btn" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg text-sm">
                            üîÑ ◊†◊™◊ó ◊©◊ï◊ë
                        </button>
                    </div>
                </div>
            `;
            
            // Add event listeners for new buttons
            const applyBtn = document.getElementById('apply-ai-suggestions-btn');
            const regenerateBtn = document.getElementById('regenerate-analysis-btn');
            
            if (applyBtn) {
                applyBtn.addEventListener('click', () => applyAISuggestions(response));
            }
            
            if (regenerateBtn) {
                regenerateBtn.addEventListener('click', handleSmartPackingAnalysis);
            }
        }
        
        // Clear uploaded images
        if (luggageInput) luggageInput.value = '';
        if (itemsInput) itemsInput.value = '';
        
    } catch (error) {
        console.warn('Smart packing analysis error:', error);
        
        if (resultsContainer) {
            resultsContainer.innerHTML = `
                <div class="bg-red-50 border-l-4 border-red-400 p-4 rounded">
                    <h6 class="font-semibold text-red-800 mb-2">‚ùå ◊©◊í◊ô◊ê◊î ◊ë◊†◊ô◊™◊ï◊ó</h6>
                    <p class="text-sm text-red-700">◊ú◊ê ◊†◊ô◊™◊ü ◊ú◊†◊™◊ó ◊ê◊™ ◊î◊™◊û◊ï◊†◊ï◊™ ◊õ◊®◊í◊¢. ◊ê◊†◊ê ◊ë◊ì◊ß◊ï ◊ê◊™ ◊î◊ó◊ô◊ë◊ï◊® ◊ú◊ê◊ô◊†◊ò◊®◊†◊ò ◊ï◊†◊°◊ï ◊©◊ï◊ë.</p>
                    <button onclick="handleSmartPackingAnalysis()" class="mt-2 bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm">
                        ◊†◊°◊î ◊©◊ï◊ë
                    </button>
                </div>
            `;
        }
    }
}

// Convert file to base64
function convertToBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
}

// --- ENHANCED EVENT HANDLERS ---

/**
 * Enhanced button click handler with animations and feedback
 */
export function handleEnhancedButtonClick(event, action, options = {}) {
    const button = event.target;
    const {
        loadingText = '◊ò◊ï◊¢◊ü...',
        successText = '◊î◊¶◊ú◊ó◊î!',
        errorText = '◊©◊í◊ô◊ê◊î!',
        showAnimation = true,
        showFeedback = true
    } = options;

    // Add loading state to button
    if (window.loadingManager) {
        const loadingId = window.loadingManager.showButtonLoading(button, loadingText);
        
        // Execute action
        Promise.resolve(action())
            .then((result) => {
                // Success feedback
                if (showFeedback && window.toastManager) {
                    window.toastManager.success(successText);
                }
                
                // Success animation
                if (showAnimation && window.animationManager) {
                    window.animationManager.animateElement(button, 'bounce-in');
                }
                
                return result;
            })
            .catch((error) => {
                console.error('Button action failed:', error);
                
                // Error feedback
                if (showFeedback && window.toastManager) {
                    window.toastManager.error(errorText);
                }
                
                // Error animation
                if (showAnimation && window.animationManager) {
                    window.animationManager.animateElement(button, 'shake');
                }
                
                throw error;
            })
            .finally(() => {
                // Hide loading state
                window.loadingManager.hideButtonLoading(loadingId);
            });
    } else {
        // Fallback to original behavior
        action();
    }
}

/**
 * Enhanced form submission handler
 */
export function handleEnhancedFormSubmit(event, submitAction, options = {}) {
    event.preventDefault();
    
    const form = event.target;
    const {
        loadingText = '◊©◊ï◊ú◊ó...',
        successText = '◊†◊©◊ú◊ó ◊ë◊î◊¶◊ú◊ó◊î!',
        errorText = '◊©◊í◊ô◊ê◊î ◊ë◊©◊ú◊ô◊ó◊î',
        resetForm = true
    } = options;

    // Show loading state
    if (window.loadingManager) {
        const loadingId = window.loadingManager.show(form, loadingText);
        
        // Execute submit action
        Promise.resolve(submitAction(form))
            .then((result) => {
                // Success feedback
                if (window.toastManager) {
                    window.toastManager.success(successText);
                }
                
                // Reset form if requested
                if (resetForm) {
                    form.reset();
                }
                
                // Success animation
                if (window.animationManager) {
                    window.animationManager.animateElement(form, 'bounce-in');
                }
                
                return result;
            })
            .catch((error) => {
                console.error('Form submission failed:', error);
                
                // Error feedback
                if (window.toastManager) {
                    window.toastManager.error(errorText);
                }
                
                // Error animation
                if (window.animationManager) {
                    window.animationManager.animateElement(form, 'shake');
                }
                
                throw error;
            })
            .finally(() => {
                // Hide loading state
                window.loadingManager.hide(loadingId);
            });
    } else {
        // Fallback to original behavior
        submitAction(form);
    }
}

/**
 * Enhanced modal handler with animations
 */
export function handleEnhancedModalOpen(modalId, options = {}) {
    const modal = document.getElementById(modalId);
    if (!modal) return;

    const {
        animation = 'scale-in',
        showBackdrop = true,
        closable = true
    } = options;

    // Show modal with animation
    if (window.animationManager) {
        modal.style.display = 'flex';
        window.animationManager.animateModal(modal, true);
    } else {
        // Fallback to original modal behavior
        openModal(modalId);
    }

    // Add backdrop click handler if closable
    if (closable && showBackdrop) {
        const backdrop = modal.querySelector('.modal-backdrop') || modal;
        backdrop.addEventListener('click', (e) => {
            if (e.target === backdrop) {
                handleEnhancedModalClose(modalId);
            }
        });
    }
}

/**
 * Enhanced modal close handler
 */
export function handleEnhancedModalClose(modalId) {
    const modal = document.getElementById(modalId);
    if (!modal) return;

    // Close modal with animation
    if (window.animationManager) {
        window.animationManager.animateModal(modal, false);
    } else {
        // Fallback to original modal behavior
        closeModal(modalId);
    }
}

/**
 * Enhanced card interaction handler
 */
export function handleEnhancedCardInteraction(card, action, options = {}) {
    const {
        hoverAnimation = 'scale-in',
        clickAnimation = 'bounce-in',
        showFeedback = true
    } = options;

    // Add hover animation
    if (window.animationManager) {
        card.addEventListener('mouseenter', () => {
            window.animationManager.animateElement(card, hoverAnimation, 0.1);
        });
    }

    // Add click handler
    card.addEventListener('click', (event) => {
        event.preventDefault();
        
        // Click animation
        if (window.animationManager) {
            window.animationManager.animateElement(card, clickAnimation);
        }
        
        // Execute action
        Promise.resolve(action(card))
            .then((result) => {
                if (showFeedback && window.toastManager) {
                    window.toastManager.success('◊§◊¢◊ï◊ú◊î ◊î◊ï◊©◊ú◊û◊î ◊ë◊î◊¶◊ú◊ó◊î!');
                }
                return result;
            })
            .catch((error) => {
                console.error('Card action failed:', error);
                if (showFeedback && window.toastManager) {
                    window.toastManager.error('◊©◊í◊ô◊ê◊î ◊ë◊ë◊ô◊¶◊ï◊¢ ◊î◊§◊¢◊ï◊ú◊î');
                }
            });
    });
}

/**
 * Enhanced scroll handler with animations
 */
export function setupEnhancedScrollAnimations() {
    if (!window.animationManager) return;

    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const element = entry.target;
                
                // Add animation based on element type
                if (element.classList.contains('card')) {
                    window.animationManager.animateElement(element, 'slide-in-left');
                } else if (element.classList.contains('section')) {
                    window.animationManager.animateElement(element, 'fade-in');
                } else {
                    window.animationManager.animateElement(element, 'scale-in');
                }
                
                observer.unobserve(element);
            }
        });
    }, observerOptions);

    // Observe elements for scroll animations
    document.querySelectorAll('.card, .section, .activity-card').forEach(el => {
        observer.observe(el);
    });
}

/**
 * Enhanced keyboard navigation handler
 */
export function setupEnhancedKeyboardNavigation() {
    document.addEventListener('keydown', (event) => {
        // Handle escape key for modals
        if (event.key === 'Escape') {
            if (window.enhancedModalManager) {
                window.enhancedModalManager.closeTopModal();
            } else {
                closeAllModals();
            }
        }
        
        // Handle enter key for buttons
        if (event.key === 'Enter' && event.target.tagName === 'BUTTON') {
            event.target.click();
        }
        
        // Handle arrow keys for navigation
        if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {
            handleArrowKeyNavigation(event);
        }
    });
}

/**
 * Handle arrow key navigation
 */
function handleArrowKeyNavigation(event) {
    const focusableElements = document.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    
    const currentIndex = Array.from(focusableElements).indexOf(document.activeElement);
    let nextIndex = currentIndex;
    
    switch (event.key) {
        case 'ArrowDown':
        case 'ArrowRight':
            nextIndex = (currentIndex + 1) % focusableElements.length;
            break;
        case 'ArrowUp':
        case 'ArrowLeft':
            nextIndex = currentIndex === 0 ? focusableElements.length - 1 : currentIndex - 1;
            break;
    }
    
    if (nextIndex !== currentIndex) {
        focusableElements[nextIndex].focus();
        event.preventDefault();
    }
}

/**
 * Initialize enhanced event handlers
 */
export function initializeEnhancedEventHandlers() {
    // Setup scroll animations
    setupEnhancedScrollAnimations();
    
    // Setup keyboard navigation
    setupEnhancedKeyboardNavigation();
    
    // Add enhanced interactions to existing elements
    document.querySelectorAll('.btn-primary').forEach(button => {
        button.addEventListener('click', (event) => {
            handleEnhancedButtonClick(event, () => {
                // Default action - can be overridden
                console.log('Enhanced button clicked');
            });
        });
    });
    
    // Add enhanced interactions to cards
    document.querySelectorAll('.card, .activity-card').forEach(card => {
        handleEnhancedCardInteraction(card, (cardElement) => {
            // Default card action - can be overridden
            console.log('Enhanced card interaction');
        });
    });
    
    console.log('Enhanced event handlers initialized');
}

// Show quota exceeded notification
function showQuotaExceededNotification() {
    // Check if notification already exists
    if (document.getElementById('quota-exceeded-notification')) return;
    
    const notification = document.createElement('div');
    notification.id = 'quota-exceeded-notification';
    notification.className = 'fixed top-4 right-4 bg-gradient-to-r from-orange-500 to-red-500 text-white p-4 rounded-lg shadow-lg z-50 max-w-sm';
    notification.innerHTML = `
        <div class="flex items-start">
            <div class="flex-shrink-0">
                <span class="text-2xl">üö´</span>
            </div>
            <div class="ml-3 flex-1">
                <h3 class="text-sm font-semibold">◊û◊í◊ë◊ú◊™ AI ◊î◊ï◊©◊ú◊û◊î</h3>
                <p class="text-xs mt-1 opacity-90">◊î◊í◊¢◊™◊ù ◊ú◊û◊í◊ë◊ú◊™ ◊î◊©◊ô◊û◊ï◊© ◊î◊ô◊ï◊û◊ô◊™. ◊†◊°◊ï ◊©◊ï◊ë ◊û◊ó◊® ◊ê◊ï ◊©◊ì◊®◊í◊ï ◊ê◊™ ◊î◊™◊ï◊õ◊†◊ô◊™.</p>
                <div class="mt-2 flex gap-2">
                    <a href="https://aistudio.google.com/app/apikey" target="_blank" 
                       class="text-xs bg-white bg-opacity-20 hover:bg-opacity-30 px-2 py-1 rounded transition-colors">
                        ◊©◊ì◊®◊í ◊™◊ï◊õ◊†◊ô◊™
                    </a>
                    <button onclick="this.parentElement.parentElement.parentElement.parentElement.remove()" 
                            class="text-xs bg-white bg-opacity-20 hover:bg-opacity-30 px-2 py-1 rounded transition-colors">
                        ◊°◊í◊ï◊®
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // Auto-remove after 10 seconds
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 10000);
}

// Apply AI suggestions to the luggage planner
async function applyAISuggestions(aiResponse) {
    // Simple implementation - in a real app, you'd parse the AI response more intelligently
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
    notification.innerHTML = `
        <div class="flex items-center">
            <span class="mr-2">‚úÖ</span>
            <div>
                <div class="font-semibold">◊î◊û◊ú◊¶◊ï◊™ AI ◊ô◊ï◊©◊û◊ï</div>
                <div class="text-sm opacity-90">◊î◊û◊™◊õ◊†◊ü ◊¢◊ï◊ì◊õ◊ü ◊ú◊§◊ô ◊î◊†◊ô◊™◊ï◊ó ◊î◊ó◊õ◊ù</div>
            </div>
        </div>
    `;
    document.body.appendChild(notification);
    
    // Auto-remove after 4 seconds
    setTimeout(() => {
        notification.remove();
    }, 4000);
    
    // Re-render luggage planner to show updated suggestions
    import(`./ui.js?v=${VERSION}`).then(({ renderLuggagePlanner }) => {
        if (renderLuggagePlanner) renderLuggagePlanner();
    });
}
